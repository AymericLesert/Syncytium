/// <reference path="../../../_references.js" />/// <reference path="Enum.js" />/// <reference path="List.js" />/// <reference path="ListArray.js" />/* * Define a dialog box handling a record */SampleRecord.Box = class extends GUI.Box.BoxRecord {    /**     * @returns {List.List} list representing all ressources     */    get List() {        return this._list;    }    /**     * @param {any} list set a list to this box     */    set List( list ) {        this._list = list ? list : new SampleRecord.List();    }    /**     * Draw and show the content of the dialog box     * @param {any} container zone having the content     */    drawContent ( container ) {        super.drawContent( container );        function handleChangeTitle( box ) {            return function () {                box.Title = Helper.Label( box.Title.label, box.getRecordLabel() );            };        }        // ------------------------------- Panel '_photo'        this.declarePanel( "_photo" );        // 'Picture' : Picture of the example        this._fieldPicture = this.declareField( "Picture" );        // ------------------------------- Panel '_fields'        this.declarePanel( "_fields" );        // 'Name' : Name of the example        this._fieldName = this.declareField( "Name" );        this._fieldName.on( 'change', handleChangeTitle( this ) );        // 'Description' : Long description of the example        this._fieldDescription = this.declareField( "Description" );        // 'Enable' : Enable or disable the using of this example        this._fieldEnable = this.declareField( "Enable" );        // ------------------------------- List of navigation panels        this.declareNavigationPanels( [["_photo", "_fields"]] );    }    /**     * Virtual method called on onOpen of the box containing the component     */    onOpen() {        super.onOpen();    }    /**     * Open the box     */    open() {        super.open();        this._fieldName.raise( 'change' );    }    /**     * Constructor     * @param {any} list if undefined, UserRecord.List() or a reference on a UserRecord.List()     */    constructor( list ) {        super( "Sample", list ? list : new SampleRecord.List() );        this._fieldName = null;        this._fieldPicture = null;        this._fieldDescription = null;        this._fieldEnable = null;        this.draw();    }};
