-- ------------------------------------- ORACLE -------------------------------------
-- Copyright (C) 2017 LESERT Aymeric - aymeric.lesert@concilium-lesert.fr
-- 
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; either version 2 of the License, or
-- (at your option) any later version.
-- 
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- GNU General Public License for more details.
-- 
-- You should have received a copy of the GNU General Public License along
-- with this program; if not, write to the Free Software Foundation, Inc.,
-- 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-- 
-- 2017/09/12 - Aymeric Lesert - Create Module Admininistration
-- ----------------------------------------------------------------------------------


-- Create table : Language


create sequence S_LANGUAGE start with 1 increment by 1;

create table "Language"
		("Id"         NUMBER(10)     NOT NULL PRIMARY KEY,
		 "CustomerId" NUMBER(10)         NOT NULL,
		 "Key"        NVARCHAR2(64)  NOT NULL,
		 "FR"         NVARCHAR2(1024),
		 "Comment"    NVARCHAR2(256),
		 CONSTRAINT   fk_language_00 FOREIGN KEY("CustomerId") REFERENCES "Customer"("Id"));

CREATE OR REPLACE TRIGGER t_language
  BEFORE INSERT ON "Language"
  FOR EACH ROW
BEGIN
  :new."Id" := S_LANGUAGE.nextval;
END;

-- Status: 0: Not change, 1: Add, 2: Delete, 3: Update

create table "_Language"
                ("Key"     NVARCHAR2(64)  NOT NULL,
                 "FR"      NVARCHAR2(1024),
                 "Comment" NVARCHAR2(256),
                 "Status"  NUMBER(2)      NOT NULL);

create or replace procedure BeginMultilingualUpdate as
begin
  delete "_Language";

  insert into "_Language"("Key", "FR", "Comment", "Status")
  select "Key", "FR", "Comment", 2
    from "Language"
   where "CustomerId" = 1;
end;

create or replace procedure InsertMultilingualLabel(LabelKey varchar2, LabelFR varchar2, LabelComment varchar2) as
begin
  update "_Language"
     set "Status" = 0
   where "Key" = LabelKey and nvl(to_char("FR"), '###') = nvl(to_char(LabelFR), '###') and
                              nvl(to_char("Comment"), '###') = nvl(to_char(LabelComment), '###');
   
  update "_Language"
     set "Status" = 3, "FR" = LabelFR, "Comment" = LabelComment
   where "Key" = LabelKey and (nvl(to_char("FR"), '###') <> nvl(to_char(LabelFR), '###') or
                               nvl(to_char("Comment"), '###') <> nvl(to_char(LabelComment), '###'));
   
  insert into "_Language"("Key", "FR", "Comment", "Status")
  select LabelKey, LabelFR, LabelComment, 1
    from dual
   where not exists (select *
                       from "_Language"
		   		            where "_Language"."Key" = LabelKey);
end;

create or replace procedure EndMultilingualUpdate as
begin
  -- Add all new labels
  
  insert into "Language"("CustomerId", "Key", "FR", "Comment")
  select "Customer"."Id", "Key", "FR", "_Language"."Comment"
    from "Customer", "_Language"
   where "_Language"."Status" = 1;
   
   -- Delete labels not added

  delete "Language"
   where "Key" in (select "Key" from "_Language" where "Status" = 2);
   
  -- Update labels and comments
   
  update "Language"
     set "FR" = (select "FR" from "_Language" where "Language"."Key" = "_Language"."Key" and "_Language"."Status" = 3),
         "Comment" = (select "Comment" from "_Language" where "Language"."Key" = "_Language"."Key" and "_Language"."Status" = 3)
   where "Language"."Key" in (select "Key" from "_Language" where "Status" = 3);
   
  delete "_Language";

  -- delete all previous updates

  delete "_Information" where "Table" = 'Language';
end;


-- create table Notification


create sequence S_NOTIFICATION start with 1 increment by 1;

create table "Notification"
		("Id"         NUMBER(10) NOT NULL PRIMARY KEY,
		 "UserId"     NUMBER(10) NOT NULL,
		 "CustomerId" NUMBER(10) NOT NULL,
		 "LastTick"   NUMBER(10) NOT NULL,
		 "Date"       TIMESTAMP  DEFAULT (sysdate) NOT NULL,
		 "Report"     NVARCHAR2(32),
		 CONSTRAINT fk_notification_00 FOREIGN KEY("UserId") REFERENCES "User"("Id"),
		 CONSTRAINT fk_notification_01 FOREIGN KEY("CustomerId") REFERENCES "Customer"("Id"));

CREATE OR REPLACE TRIGGER t_notification
  BEFORE INSERT ON "Notification"
  FOR EACH ROW
BEGIN
  :new."Id" := S_NOTIFICATION.nextval;
END;

create index I_NOTIFICATION_USER on "Notification"("UserId");

create index I_NOTIFICATION_CUSTOMER on "Notification"("CustomerId");
