/// <reference path="../../../_references.js" />/// <reference path="Enum.js" />/** * Handling a list of samples */SampleRecord.List = class extends List.ListRecord {    /**     * Compare 2 items by the text describing the item     * @param {any} item1 first item     * @param {any} item2 second item     * @returns {int} -1, 0 or 1 on depends on the order of the 2 elements     */    compare( item1, item2 ) {        return super.compare( item1, item2 );    }    /**     * @returns {any} New record of the table     */    get NewItem() {        var record = super.NewItem;        // TODO: Add some more fields or internal properties        return record;    }    /**     * Retrieve an item into the list by its id     * If force is true, the filter is not applied to look for the id     * @param {any} id    id of the record to look for     * @param {any} force true if the record must be retrieved even if the record is not visible     * @returns {any} item or null     */    getItem( id, force ) {        var record = super.getItem( id, force );        // TODO: Add some more fields or internal properties        return record;    }    /**     * Get the text value of the item     * @param {any} item record containing the label to retrieve     * @returns {any} a string     */    getText( item ) {        return super.getText( item );    }    /**     * Get the picture of the item (null if no picture)     * @param {any} item record containing the picture to retrieve     * @returns {any} a picture (base 64 or filename)     */    getPicture( item ) {        return super.getPicture( item );    }    /**     * Get the html content of an attribute (to show the attribute)     * @param {any} item record containing the attribute to look for     * @param {any} attribute property to retrieve     * @returns {any} a HTML code describing the attribute or the value of the attribute     */    getAttributHTML ( item, attribute ) {        return super.getAttributHTML( item, attribute );    }    /**     * Get the html content of a tooltip for an attribute (to show the value into a board)     * @param {any} item record containing the attribute to look for     * @param {any} attribute property to retrieve     * @returns {any} a HTML code describing the tooltip to show of the attribute     */    getAttributToolTipHTML( item, attribute ) {        var result = super.getAttributToolTipHTML( item, attribute );        // TODO: If the HTML object is different than one of the expected values ... define it!        return result;    }    /**     * Get the text of an attribute (to filter the value)     * @param {any} item record containing the attribute to look for     * @param {any} attribute property to retrieve     * @returns {string} a string representing the value of the field     */    getAttributText ( item, attribute ) {        switch ( attribute ) {            case "Enable":                return this.getAttributTextBoolean( item, attribute );            default:                return super.getAttributText( item, attribute );        }    }    /**     * Get the value of an attribute (to sort it)     * @param {any} item record containing the attribute to look for     * @param {any} attribute property to retrieve     * @returns {any} value of the field     */    getAttributValue( item, attribute ) {        return super.getAttributValue( item, attribute );    }    /**     * Check if the element attached to the attribute is deleted or not (show if the reference is deleted)     * @param {any} item record containing the attribute to look for     * @param {any} attribute property to retrieve     * @returns {boolean} true if the reference of the property is deleted     */    isAttributDeleted( item, attribute ) {        return super.isAttributDeleted( item, attribute );    }    /**     * Check the validity of the item     * @param {any} item   record to check     * @param {any} errors container of errors after checking     * @param {any} force  true if the first step (warning is validated by the user)     * @returns {any} null     */    checkItem ( item, errors, force ) {        var result = super.checkItem ( item, errors, force );        if ( Helper.IsLabel( result ) )            return result;        if ( errors.HasError )            return errors;        // TODO: Add some more checks not done within Properties and all properties of the sub lists        return result;    }    /**     * Add a new item into the database and return a new id (or null, if no id available)     * @param {any} newItem item to add     * @param {any} errors container of errors after adding     * @param {any} force  true if the first step (warning is validated by the user)     * @param {any} checkItem true or undefined if the element and its sub-elements must be checked     * @returns {any} new item added into the list or errors     */    addItem ( newItem, errors, force, checkItem ) {        var item = super.addItem( newItem, errors, force, checkItem );        if ( errors.HasError )            return errors;        if ( Helper.IsLabel( item ) )            return item;        // TODO: Add another components or execute some more requests (item and sub lists are already set)        if ( errors.HasError )            return errors;        return item;    }    /**     * Update an item into the database     * @param {any} id id of the record updated     * @param {any} oldItem item to update     * @param {any} newItem item updated     * @param {any} errors container of errors after updating     * @param {any} force  true if the first step (warning is validated by the user)     * @param {any} checkItem true or undefined if the element and its sub-elements must be checked     * @returns {any} item updated into the list or errors     */    updateItem ( id, oldItem, newItem, errors, force, checkItem ) {        var item = super.updateItem( id, oldItem, newItem, errors, force, checkItem );        if ( errors.HasError )            return errors;        if ( Helper.IsLabel( item ) )            return item;        // TODO: Update components or execute some more requests (item and sub lists are already updated)        if ( errors.HasError )            return errors;        return item;    }    /**     * Remove an item into the database     * @param {any} id id of the record removed     * @param {any} oldItem item to remove     * @param {any} errors container of errors after updating     * @param {any} checkItem true or undefined if the element and its sub-elements must be checked     * @returns {any} item deleted or errors     */    deleteItem ( id, oldItem, errors, checkItem ) {        var item = super.deleteItem( id, oldItem, errors, checkItem );        if ( errors.HasError )            return errors;        // TODO: Delete some more components into the database (item and sub lists are done)        if ( errors.HasError )            return errors;        return item;    }    /**     * Cancel the item into the database (revert the update)     * @param {any} id id of the record updated     * @param {any} oldItem item to update     * @param {any} newItem item updated     * @param {any} errors container of errors after cancelling     * @returns {any} true if the item is cancelled     */    cancelItem ( id, oldItem, newItem, errors ) {        var item = super.cancelItem( id, oldItem, newItem, errors );        if ( errors.HasError )            return errors;        // TODO: Cancel some more components into the database (item and sub lists are done)        if ( errors.HasError )            return errors;        return item;    }    /**     * True if the field is visible in a dialog box     * @param {any} box      reference on the dialog box     * @param {any} attribute column / property     * @param {any} user     current user     * @param {any} item     item handled by the current dialog box     * @returns {boolean} true if the field is allowed to be shown     */    isBoxFieldVisible( box, attribute, user, item ) {        if ( !super.isBoxFieldVisible( box, attribute, user, item) )            return false;        // TODO: Add rules on visible or not fields        return true;    }    /**     * False if the field can be updated in a dialog box     * @param {any} box      reference on the dialog box     * @param {any} attribute column / property     * @param {any} user     current user     * @param {any} item     item handled by the current dialog box     * @returns {boolean} true if the field can't be updated by the current user     */    isBoxFieldReadonly( box, attribute, user, item ) {        if ( super.isBoxFieldReadonly( box, attribute, user, item) )            return true;        // TODO: Add rules on readonly or not fields        return false;    }    /**     * True if the board is visible in a dialog box     * @param {any} box      reference on the dialog box     * @param {any} board board name     * @param {any} user  current user     * @param {any} item     item handled by the current dialog box     * @returns {boolean} true if the board is allowed to be shown     */    isBoxBoardVisible( box, board, user, item ) {        if ( !super.isBoxBoardVisible( box, board, user, item) )            return false;        // TODO: Add rules on visible or not boards        return true;    }    /**     * False if the board can be updated in a dialog box     * @param {any} box      reference on the dialog box     * @param {any} board board name     * @param {any} user  current user     * @param {any} item     item handled by the current dialog box     * @returns {boolean} true if the board can't be updated by the current user     */    isBoxBoardReadonly( box, board, user, item ) {        if ( super.isBoxBoardReadonly( box, board, user, item) )            return true;        // TODO: Add rules on readonly or not boards        return false;    }    /**     * True if the panel is visible in a dialog box     * @param {any} box      reference on the dialog box     * @param {any} panel panel name     * @param {any} user  current user     * @param {any} item     item handled by the current dialog box     * @returns {boolean} true if the panel is allowed to be shown     */    isBoxPanelVisible( box, panel, user, item ) {        if ( !super.isBoxPanelVisible( box, panel, user, item) )            return false;        // TODO: Add rules on visible or not panels        return true;    }    /**     * False if the panel can be updated in a dialog box     * @param {any} box      reference on the dialog box     * @param {any} panel panel name     * @param {any} user  current user     * @param {any} item  item handled by the current dialog box     * @returns {boolean} true if the panel can't be updated by the current user     */    isBoxPanelReadonly( box, panel, user, item ) {        if ( super.isBoxPanelReadonly( box, panel, user, item) )            return true;        // TODO: Add rules on readonly or not panels        return false;    }    /**     * True if the field is visible in a board     * @param {any} board    reference on the board     * @param {any} attribute column / property     * @param {any} user     current user     * @param {any} item     item handled by the board (null for a column)     * @returns {boolean} true if the field is allowed to be shown     */    isBoardFieldVisible( board, attribute, user, item ) {        if ( !super.isBoardFieldVisible( board, attribute, user, item ) )            return false;        // TODO: Add rules on visible or not fields into a board (column or cell)        return true;    }    /**     * False if the field can be updated in a board     * @param {any} board    reference on the board     * @param {any} attribute column / property     * @param {any} user     current user     * @param {any} item     item handled by the board     * @returns {boolean} true if the field can't be updated by the current user     */    isBoardFieldReadonly( board, attribute, user, item ) {        if ( super.isBoardFieldReadonly( board, attribute, user, item ) )            return true;        // TODO: Add rules on readonly or not fields into a board (column or cell)        return false;    }    /**     * True if the user can execute the event into a board     * @param {any} board    reference on the board     * @param {any} user     current user     * @param {string} event event name "board", "add", "cancel", "delete" or "help"     * @param {any} item     item handled by the board (can be null or undefined)     * @returns {boolean} true if the user can execute the event     */    isBoardAllowed( board, user, event, item ) {        return super.isBoardAllowed( board, user, event, item );    }    /**     * Constructor     * @param {any} allRecords true : take into account the Enable property     */    constructor( allRecords ) {        super( "Sample", allRecords );        this.DefaultPicture = SampleRecord.DEFAULT_PICTURE().picture;    }};
