<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncytium.Common</name>
    </assembly>
    <members>
        <member name="T:Syncytium.Common.Database.DatabaseCacheManager">
            <summary>
            Singleton cache the content of the database into memory
            Limit this usage for some tables to avoid too much memory
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DatabaseCacheManager.MODULE">
            <summary>
            Module name used into the log file
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseCacheManager.IsVerboseAll">
            <summary>
            Indicates if the all verbose mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseCacheManager.IsVerbose">
            <summary>
            Indicates if the verbose mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseCacheManager.Verbose(System.String)">
            <summary>
            Log a verbose message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseCacheManager.IsDebug">
            <summary>
            Indicates if the debug mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseCacheManager.Debug(System.String)">
            <summary>
            Log a debug message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseCacheManager.Info(System.String)">
            <summary>
            Log an info message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseCacheManager.Warn(System.String)">
            <summary>
            Log a warn message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseCacheManager.Error(System.String)">
            <summary>
            Log an error message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseCacheManager.Exception(System.String,System.Exception)">
            <summary>
            Log an exception message
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="F:Syncytium.Common.Database.DatabaseCacheManager._instance">
            <summary>
            Instance of the current random manager
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DatabaseCacheManager._enable">
            <summary>
            Indicate if the cache is enabled or not
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DatabaseCacheManager.IsEnable">
            <summary>
            Notify if the cache manager is enabled
            </summary>
        </member>
        <member name="T:Syncytium.Common.Database.DatabaseCacheManager.FunctionGetDatabase">
            <summary>
            Reference on a function to get the database on depends on the area
            </summary>
            <param name="area"></param>
        </member>
        <member name="P:Syncytium.Common.Database.DatabaseCacheManager._tick">
            <summary>
            The last tick loaded into the cache per customer
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DatabaseCacheManager._records">
            <summary>
            Handle a cache of DSRecord (per customer, per table and per Id)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DatabaseCacheManager._tables">
            <summary>
            Keep in memory the list of tables loaded into the cache
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DatabaseCacheManager._ids">
            <summary>
            Keep in memory the list of ids get by (CreateId, CreateUserId, Table)
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DatabaseCacheManager._mutex">
            <summary>
            Mutex protecting the critical section
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DatabaseCacheManager._mutexes">
            <summary>
            Mutex protecting the critical section for the customer only
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseCacheManager.#ctor">
            <summary>
            Constructor of the cache manager
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseCacheManager.Lock(System.Int32,System.Boolean)">
            <summary>
            Lock the current customer
            </summary>
            <param name="customerId"></param>
            <param name="lockMaster"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseCacheManager.Unlock(System.Int32)">
            <summary>
            Unlock the current customer
            </summary>
            <param name="customerId"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseCacheManager.Dispose">
            <summary>
            Dispose the lock
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseCacheManager.GetTick(Syncytium.Common.Database.DatabaseContext,System.Int32)">
            <summary>
            Retrieve the current tick into the database for the given customer
            </summary>
            <param name="database"></param>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseCacheManager.Initialize(Syncytium.Common.Database.DatabaseContext,System.Collections.Generic.List{System.Int32},Syncytium.Common.Database.DatabaseCacheManager.FunctionGetDatabase)">
            <summary>
            Load all data in once ...
            </summary>
            <param name="database"></param>
            <param name="customerIds">All customers Id to load</param>
            <param name="getDatabase"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseCacheManager.Initialize(Syncytium.Common.Database.DatabaseContext,System.Int32,Syncytium.Common.Database.DatabaseCacheManager.FunctionGetDatabase)">
            <summary>
            Load all data in once for one customer ...
            </summary>
            <param name="database"></param>
            <param name="customerId"></param>
            <param name="getDatabase"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseCacheManager.Reload(Syncytium.Common.Database.DatabaseContext,System.Int32,System.String)">
            <summary>
            Reload the content of a table into the cache
            </summary>
            <param name="database"></param>
            <param name="customerId"></param>
            <param name="table"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseCacheManager.UpdateCache(Syncytium.Common.Database.DatabaseContext,System.Int32,Syncytium.Common.Database.DatabaseCacheManager.FunctionGetDatabase)">
            <summary>
            Check if the last tick loaded is different, and only load differences ...
            </summary>
            <param name="database"></param>
            <param name="customerId"></param>
            <param name="getDatabase"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseCacheManager.UpdateCache(System.Collections.Generic.List{System.Tuple{System.String,Syncytium.Common.Database.DSModel.DSRecord,Syncytium.Common.Database.DSModel.InformationRecord}},System.Int32,System.Int32)">
            <summary>
            Update the cache within the list of records updated by the transaction
            </summary>
            <param name="records"></param>
            <param name="customerId"></param>
            <param name="tick"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseCacheManager.GetRecord(Syncytium.Common.Database.DatabaseContext,System.String,System.Int32)">
            <summary>
            Retrieve a data into the cache, if the element doesn't exist into the cache, read data into database and update it 
            before retrieving it
            </summary>
            <param name="database"></param>
            <param name="table"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseCacheManager.GetRecords(System.String,System.Int32)">
            <summary>
            Retrieve all elements of the table for a given customer
            </summary>
            <param name="table"></param>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseCacheManager.GetId(System.Data.Entity.DbSet{Syncytium.Common.Database.DSModel.InformationRecord},System.Int32,System.Int32,System.String)">
            <summary>
            Retrieve the Id by createId, createUserId and table name
            </summary>
            <param name="information"></param>
            <param name="createId"></param>
            <param name="createUserId"></param>
            <param name="table"></param>
            <returns>Id</returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseCacheManager.SetId(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Update the Id
            </summary>
            <param name="createId"></param>
            <param name="createUserId"></param>
            <param name="table"></param>
            <param name="id"></param>
        </member>
        <member name="P:Syncytium.Common.Database.DatabaseCacheManager.Instance">
            <summary>
            Retrieve the current instance or define a new instanceof DatabaseCacheManager
            </summary>
        </member>
        <member name="T:Syncytium.Common.Database.DatabaseContext">
            <summary>
            Handle the connection to the database (See Web.config to know if it works with Oracle or SQL Server)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DatabaseContext._Parameter">
            <summary>
            Table "_Parameter"
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DatabaseContext._Connection">
            <summary>
            Table "_Connection"
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DatabaseContext._RequestId">
            <summary>
            Table "_RequestId"
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DatabaseContext._Request">
            <summary>
            Table "_Request"
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DatabaseContext._RequestTable">
            <summary>
            Table "_Request"
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DatabaseContext._SequenceId">
            <summary>
            Table "_SequenceId"
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DatabaseContext._Information">
            <summary>
            Table "_Information"
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DatabaseContext._Ping">
            <summary>
            Table "_Ping"
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DatabaseContext._provider">
            <summary>
            Reference on the provider depending on the database connection
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DatabaseContext._lock">
            <summary>
            Reference on the current transaction opened by the lock
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DatabaseContext.MODULE">
            <summary>
            Module name used into the log file
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.IsVerboseAll">
            <summary>
            Indicates if the all verbose mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.IsVerbose">
            <summary>
            Indicates if the verbose mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.Verbose(System.String)">
            <summary>
            Log a verbose message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.IsDebug">
            <summary>
            Indicates if the debug mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.Debug(System.String)">
            <summary>
            Log a debug message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.Info(System.String)">
            <summary>
            Log an info message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.Warn(System.String)">
            <summary>
            Log a warn message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.Error(System.String)">
            <summary>
            Log an error message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.Exception(System.String,System.Exception)">
            <summary>
            Log an exception message
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <summary>
            Set the schema name of the database
            </summary>
            <param name="modelBuilder"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.Dispose(System.Boolean)">
            <summary>
            Override the Dispose to write a message on deleting the database context
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.ExistTable(System.String)">
            <summary>
             check if a table exists into the database
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.HasToUpgrade">
            <summary>
            Check if an upgrade must be done
            </summary>
            <returns>true if the database is up to date</returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.Upgrade">
            <summary>
            Upgrade the current schema of the database towards the last one
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.Lock(System.Int32)">
            <summary>
            Lock the database for a customer
            </summary>
            <param name="customerId"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.CleanupConnection">
            <summary>
            Remove all connection for the current machine
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.GetCache(Syncytium.Common.Database.DSSchema.DSDatabase)">
            <summary>
            Factory building a cache using to optimize the notification effect
            Virtual method (in sub class, define it the order of tables to notify)
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.PrepareRequest(Syncytium.Common.Database.DSSchema.DSCache,System.Int32,System.String,System.String,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Method called before starting the execution of the transaction
            </summary>
            <param name="cache"></param>
            <param name="userId"></param>
            <param name="table"></param>
            <param name="action"></param>
            <param name="record"></param>
            <param name="identity"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.GetListRecordsConcernedByUpdate(Syncytium.Common.Database.DSSchema.DSCache,System.String,System.Int32,System.Int32,System.Int32,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile,System.String,System.Boolean,Syncytium.Common.Database.DSModel.DSRecord,Syncytium.Common.Database.DSModel.InformationRecord)">
            <summary>
            Retrieve a list of tuple (DSRecord, Table) attached to a given record (table, id) for the given profile
            This function is used to retrieve a list of records attached to the current update
            Example :
               The object A is not visible for the user Y
               The user X updates the object A
               The object A becomes visible for the user Y
               In that case, object A must be added and notified to the user Y
               This function builds this case
            </summary>
            <param name="cache"></param>
            <param name="table"></param>
            <param name="id"></param>
            <param name="customerId"></param>
            <param name="userId"></param>
            <param name="profile"></param>
            <param name="area"></param>
            <param name="deepUpdate"></param>
            <param name="recordAlreadyRead"></param>
            <param name="informationAlreadyRead"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.GetSequence(System.Int32,System.String)">
            <summary>
            Retrieve the next value of the key into the database
            </summary>
            <param name="customerId"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.GetSequenceKey(System.Int32,System.String,System.Int32)">
            <summary>
            Retrieve the next value of the key into the database
            </summary>
            <param name="customerId"></param>
            <param name="key"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.SetSequence(System.Int32,System.String,System.Int32)">
            <summary>
            Retrieve the next value of the key into the database
            </summary>
            <param name="customerId"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.ExecuteServiceCredits(Newtonsoft.Json.Linq.JArray,System.String)">
            <summary>
            Retrieve all images and credits
            </summary>
            <param name="lines"></param>
            <param name="folder"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.ExecuteServiceReleaseNotes">
            <summary>
            Read the release notes and structure results
            </summary>
            <returns>JOBject containing the list of actions</returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.ExecuteServiceSequence(System.Int32,System.String)">
            <summary>
            Retrieve the next value of the key into the database
            </summary>
            <param name="customerId"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.ExecuteServiceSetSequence(System.Int32,System.String,System.Int32)">
            <summary>
            Retrieve the next value of the key into the database
            </summary>
            <param name="customerId"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.ExecuteService(System.Int32,System.Int32,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile,System.String,System.Int32,System.String,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Execute a service
            </summary>
            <param name="customerId"></param>
            <param name="userId"></param>
            <param name="profile"></param>
            <param name="area"></param>
            <param name="moduleId"></param>
            <param name="service"></param>
            <param name="record"></param>
            <param name="identity"></param>
            <returns>null if not currently treated or JObject with the result</returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.ExistValue(System.Nullable{System.Int32},System.String,System.String,System.String,System.Boolean,System.Object,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Check if a value already exists into a table of the database and if this value is still alive
            </summary>
            <param name="customerId"></param>
            <param name="table"></param>
            <param name="columnValue"></param>
            <param name="columnId"></param>
            <param name="caseSensitive"></param>
            <param name="value"></param>
            <param name="id"></param>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseContext.#ctor">
            <summary>
            Initialize the database access
            </summary>
        </member>
        <member name="T:Syncytium.Common.Database.DatabaseLock">
            <summary>
            Handling the creation and the disposition of a transaction locking the database
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DatabaseLock.MODULE">
            <summary>
            Module name used into the log file
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseLock.IsVerboseAll">
            <summary>
            Indicates if the all verbose mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseLock.IsVerbose">
            <summary>
            Indicates if the verbose mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseLock.Verbose(System.String)">
            <summary>
            Log a verbose message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseLock.IsDebug">
            <summary>
            Indicates if the debug mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseLock.Debug(System.String)">
            <summary>
            Log a debug message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseLock.Info(System.String)">
            <summary>
            Log an info message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseLock.Warn(System.String)">
            <summary>
            Log a warn message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseLock.Error(System.String)">
            <summary>
            Log an error message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseLock.Exception(System.String,System.Exception)">
            <summary>
            Log an exception message
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="F:Syncytium.Common.Database.DatabaseLock.Transaction">
            <summary>
            Store the current transaction
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseLock.Dispose">
            <summary>
            Dispose the lock
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseLock.Commit">
            <summary>
            Commit the transaction ...
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseLock.#ctor(System.Data.Entity.DbContextTransaction)">
            <summary>
            Constructor
            </summary>
            <param name="transaction"></param>
        </member>
        <member name="T:Syncytium.Common.Database.DatabaseManager">
            <summary>
            This class treats each resquest from a client (WebAPI REST or Web navigator client)
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DatabaseManager.Database">
            <summary>
            Reference on the current database
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DatabaseManager._userManager">
            <summary>
            Reference on the user manager
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DatabaseManager._connectionId">
            <summary>
            Connection Id of this instance
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DatabaseManager._userId">
            <summary>
            User Id of this instance
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DatabaseManager.MODULE">
            <summary>
            Module name used into the log file
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseManager.IsVerboseAll">
            <summary>
            Indicates if the all verbose mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseManager.IsVerbose">
            <summary>
            Indicates if the verbose mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseManager.Verbose(System.String)">
            <summary>
            Log a verbose message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseManager.IsDebug">
            <summary>
            Indicates if the debug mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseManager.Debug(System.String)">
            <summary>
            Log a debug message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseManager.Info(System.String)">
            <summary>
            Log an info message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseManager.Warn(System.String)">
            <summary>
            Log a warn message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseManager.Error(System.String)">
            <summary>
            Log an error message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseManager.Exception(System.String,System.Exception)">
            <summary>
            Log an exception message
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseManager.Dispose">
            <summary>
            Dispose this instance
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseManager.OpenConnection(System.Boolean)">
            <summary>
            When a new client is connected to the server, store the new connection into the database
            </summary>
            <param name="alreadyConnected"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseManager.Initialize(System.String,System.Int32)">
            <summary>
            The client starts the initialization process and has to declare its area
            </summary>
            <param name="area"></param>
            <param name="moduleId"></param>
            <returns>the database schema correspnding to the user's profile and its area:
                Version         = database version
                Schema          = database schema
                DefaultLanguage = default language (user's language or default language of the application)
                User            = user's profile
                LastRequestId   = last request id of the user
            </returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseManager.LastSequenceId(System.String)">
            <summary>
            Retrieve the last sequence id of a table
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseManager.LoadTable(System.Int32,System.Int32,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile,System.String,System.String,System.Collections.Generic.List{Syncytium.Common.Database.DSModel.DSRecord})">
            <summary>
            Load the content of the table and returns a list of columns matching within the area and the profile of the user
            </summary>
            <param name="customerId"></param>
            <param name="userId"></param>
            <param name="profile"></param>
            <param name="area"></param>
            <param name="table"></param>
            <param name="existingRecords">Define it to replace the loading into the database</param>
            <returns>The table records:
                Table          = table name
                Records        = List of tuple containing all data
                LastSequenceId = Last sequence id of the user in this table
            </returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseManager.ExecuteTransaction(Syncytium.Common.Database.DSSchema.DSTransaction)">
            <summary>
            Execute a list of requests from a client
            </summary>
            <param name="transaction"></param>
            <returns>RequestId, Error, Record</returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseManager.ExecuteService(System.Int32,System.Int32,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile,System.String,System.Int32,System.String,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Execute a service from a client
            </summary>
            <param name="customerId"></param>
            <param name="userId"></param>
            <param name="profile"></param>
            <param name="area"></param>
            <param name="moduleId"></param>
            <param name="service"></param>
            <param name="record"></param>
            <param name="identity"></param>
            <returns>Data</returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseManager.CloseConnection">
            <summary>
            When a client is disconnected to the server, remove the previous connection into the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DatabaseManager.#ctor(Syncytium.Common.Database.DatabaseContext,Syncytium.Common.Managers.IUserManager,System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="database"></param>
            <param name="userManager"></param>
            <param name="connectionId"></param>
            <param name="userId"></param>
        </member>
        <member name="T:Syncytium.Common.Database.DSAnnotation.DSAllowAttribute">
            <summary>
            Class defining the limitation on create, update or delete a record on depends on the user
            If the user isnot allowed to get access to the class, an UNAUTHORIZED exception will be raised
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSAllowAttribute.Profile">
            <summary>
            Define the profile allowed (by default: nobody can get access to this record)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSAllowAttribute.Area">
            <summary>
            Define the area attached to the table (by default: all areas)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSAllowAttribute.Action">
            <summary>
            Define the action authorized attached to the table (by default: all actions)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSAllowAttribute.FieldUserId">
            <summary>
            Define the field name to check (by default: UserId")
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSAnnotation.DSAllowAttribute._field">
            <summary>
            Reference on the property describing the field
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSAllowAttribute.Type">
            <summary>
            Annotation type
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSAllowAttribute.GetUserId(Syncytium.Common.Database.DSModel.DSRecord)">
            <summary>
            Retrieve the userId into the record
            </summary>
            <param name="record"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSAllowAttribute.ToJSON">
            <summary>
            Build an annotation into a Json
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSAllowAttribute.IsAllowed(System.Collections.Generic.IEnumerable{Syncytium.Common.Database.DSAnnotation.DSAllowAttribute},System.String,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile,System.String,System.Int32,Syncytium.Common.Database.DSModel.DSRecord)">
            <summary>
            This static function checks if the list of restrictions limits the access to the element
            on depends on the current area and the current profile
            </summary>
            <param name="allows"></param>
            <param name="area">Null, "Create", "Read", "Update" or "Delete"</param>
            <param name="profile"></param>
            <param name="action"></param>
            <param name="userId"></param>
            <param name="record"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSAllowAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Syncytium.Common.Database.DSAnnotation.DSAnnotationAttribute">
            <summary>
            Master class of Differential Synchronization Schema Description
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSAnnotationAttribute.Type">
            <summary>
            Annotation type
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSAnnotationAttribute.ToString">
            <summary>
            Describe the annotation into a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSAnnotationAttribute.ToJSON">
            <summary>
            Build an annotation into a Json
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSAnnotationAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Syncytium.Common.Database.DSAnnotation.DSConstraint.DSConstraintAttribute">
            <summary>
            Master class of Constraints done by Differential Synchronization Schema Description
            A constraint concerns a value amongst the database element.
            For example: a value referencing another key into a table
                      or the check of the unique value into a table
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSConstraint.DSConstraintAttribute.Error">
            <summary>
            Error code in case of errors (Reference the Key in Language table - To allow translation)
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSConstraint.DSConstraintAttribute.ToJSON">
            <summary>
            Build an annotation into a Json
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSConstraint.DSConstraintAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="error"></param>
        </member>
        <member name="T:Syncytium.Common.Database.DSAnnotation.DSConstraint.DSForeignKeyAttribute">
            <summary>
            Class checking if the current id is defined into the target table
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSConstraint.DSForeignKeyAttribute.Table">
            <summary>
            Table name of the foreign key id
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSConstraint.DSForeignKeyAttribute.Type">
            <summary>
            Annotation type
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSConstraint.DSForeignKeyAttribute.ToJSON">
            <summary>
            Build an annotation into a Json
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSConstraint.DSForeignKeyAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="error"></param>
            <param name="table"></param>
        </member>
        <member name="T:Syncytium.Common.Database.DSAnnotation.DSConstraint.DSIndexAttribute">
            <summary>
            Class defining the value of this field as unique (only one value available amongst the list of elements not deleted)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSConstraint.DSIndexAttribute.CaseSensitive">
            <summary>
            Indicates if the check must be case sensitive or not
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSConstraint.DSIndexAttribute.ForCustomer">
            <summary>
            Indicates if the check must be done within CustomerId or not
            Only available from the server side .. do not send to the client
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSConstraint.DSIndexAttribute.Fields">
            <summary>
            List of fields to attached to this unique value
            For example: Name has the DSIndexAttribute but it defined for the same sectionId
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSConstraint.DSIndexAttribute.Type">
            <summary>
            Annotation type
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSConstraint.DSIndexAttribute.ToJSON">
            <summary>
            Build an annotation into a Json
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSConstraint.DSIndexAttribute.#ctor(System.Boolean,System.Boolean,System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="caseSensitive"></param>
            <param name="forCustomer"></param>
            <param name="fields"></param>
        </member>
        <member name="T:Syncytium.Common.Database.DSAnnotation.DSConstraint.DSUniqueAttribute">
            <summary>
            Class defining the value of this field as unique (only one value available amongst the list of elements not deleted)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSConstraint.DSUniqueAttribute.Type">
            <summary>
            Annotation type
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSConstraint.DSUniqueAttribute.#ctor(System.Boolean,System.Boolean,System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="caseSensitive"></param>SUn
            <param name="forCustomer"></param>
            <param name="fields"></param>
        </member>
        <member name="T:Syncytium.Common.Database.DSAnnotation.DSControl.DSControlAttribute">
            <summary>
            Master class of Controls done by Differential Synchronization Schema Description
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSControl.DSControlAttribute.Error">
            <summary>
            Error code in case of errors (Reference the Key in Language table - To allow translation)
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSControl.DSControlAttribute.Check(Syncytium.Common.Database.DSSchema.DSColumn,System.Object,Syncytium.Common.Error.Errors)">
            <summary>
            Check if the value respects the control
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="errors"></param>
            <returns>true if the check is ok</returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSControl.DSControlAttribute.ToJSON">
            <summary>
            Build an annotation into a Json
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSControl.DSControlAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="error"></param>
        </member>
        <member name="T:Syncytium.Common.Database.DSAnnotation.DSControl.DSDecimalAttribute">
            <summary>
            Class checking if a decimal has a max number of digits and precision
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSControl.DSDecimalAttribute.Digit">
            <summary>
            Max number of digits
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSAnnotation.DSControl.DSDecimalAttribute._maxValue">
            <summary>
            Store the max value of the decimal
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSAnnotation.DSControl.DSDecimalAttribute._minValue">
            <summary>
            Store the min value of the decimal
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSControl.DSDecimalAttribute.Precision">
            <summary>
            Max number of precisions
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSControl.DSDecimalAttribute.Unit">
            <summary>
            Unit to apply for this value
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSControl.DSDecimalAttribute.Type">
            <summary>
            Annotation type
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSControl.DSDecimalAttribute.ToJSON">
            <summary>
            Build an annotation into a Json
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSControl.DSDecimalAttribute.Check(Syncytium.Common.Database.DSSchema.DSColumn,System.Object,Syncytium.Common.Error.Errors)">
            <summary>
            Check if the value is a decimal within expected digits
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="errors"></param>
            <returns>true if the check is ok</returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSControl.DSDecimalAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Syncytium.Common.Database.DSAnnotation.DSControl.DSEmailAttribute">
            <summary>
            Class checking if a string describes an email
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSControl.DSEmailAttribute.Type">
            <summary>
            Annotation type
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSControl.DSEmailAttribute.Check(Syncytium.Common.Database.DSSchema.DSColumn,System.Object,Syncytium.Common.Error.Errors)">
            <summary>
            Check if the value describes an email address
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="errors"></param>
            <returns>true if the check is ok</returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSControl.DSEmailAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Syncytium.Common.Database.DSAnnotation.DSControl.DSKeyAttribute">
            <summary>
            Class defining the Id as a key
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSControl.DSKeyAttribute.Type">
            <summary>
            Annotation type
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSControl.DSKeyAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Syncytium.Common.Database.DSAnnotation.DSControl.DSRequiredAttribute">
            <summary>
            Class identifying the field as a required field (not null or not empty)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSControl.DSRequiredAttribute.Type">
            <summary>
            Annotation type
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSControl.DSRequiredAttribute.Check(Syncytium.Common.Database.DSSchema.DSColumn,System.Object,Syncytium.Common.Error.Errors)">
            <summary>
            Check if the value is not null and not empty
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="errors"></param>
            <returns>true if the check is ok</returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSControl.DSRequiredAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSControl.DSRequiredAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Syncytium.Common.Database.DSAnnotation.DSControl.DSStringAttribute">
            <summary>
            Class checking if a string has a minimal or a maximal length
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSControl.DSStringAttribute.ErrorMin">
            <summary>
            Error code in case of min lenght not respected (Reference the Key in Language table - To allow translation)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSControl.DSStringAttribute.Min">
            <summary>
            Min length expected
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSControl.DSStringAttribute.ErrorMax">
            <summary>
            Error code in case of max lenght not respected (Reference the Key in Language table - To allow translation)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSControl.DSStringAttribute.Max">
            <summary>
            Max length expected
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSControl.DSStringAttribute.Type">
            <summary>
            Annotation type
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSControl.DSStringAttribute.ToJSON">
            <summary>
            Build an annotation into a Json
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSControl.DSStringAttribute.Check(Syncytium.Common.Database.DSSchema.DSColumn,System.Object,Syncytium.Common.Error.Errors)">
            <summary>
            Check if the value is a string and if the length is between Min and Max length
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="errors"></param>
            <returns>true if the check is ok</returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSControl.DSStringAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Syncytium.Common.Database.DSAnnotation.DSFormat.DSDateTimeAttribute">
            <summary>
            Class identifying the field as a date time
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSAnnotation.DSFormat.DSDateTimeAttribute._formatCS">
            <summary>
            Format to use for the string or datetime conversion - cache value (CSharp)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSFormat.DSDateTimeAttribute.FormatCS">
            <summary>
            Format to use for the string or datetime conversion (CSharp)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSFormat.DSDateTimeAttribute.FormatJS">
            <summary>
            Format to use for the string or datetime conversion (Javascript)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSFormat.DSDateTimeAttribute.Format">
            <summary>
            Format to use for the string or datetime conversion
            YYYY : Year on 4 digits
            MM : Month on 2 digits
            DD : Day on 2 digits
            HH : Hour on 24 hours
            mm : Minute on 2 digits
            ss : Second on 2 digits
            SSS : millisecondes on 3 digits
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSFormat.DSDateTimeAttribute.Type">
            <summary>
            Annotation type
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSFormat.DSDateTimeAttribute.ToJSON">
            <summary>
            Build an annotation into a Json
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSFormat.DSDateTimeAttribute.ConvertFromJSON(System.Object)">
            <summary>
            Convert a string having the given format into a DateTime
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSFormat.DSDateTimeAttribute.ConvertToJSON(System.Object)">
            <summary>
            Convert the value of an attribute to a string having the given format
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSFormat.DSDateTimeAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Syncytium.Common.Database.DSAnnotation.DSFormat.DSFileAttribute">
            <summary>
            Class identifying the field as a date time
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSFormat.DSFileAttribute.Type">
            <summary>
            Annotation type
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSFormat.DSFileAttribute.ConvertFromJSON(System.Object)">
            <summary>
            Convert a string having the given format into a array of bytes
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSFormat.DSFileAttribute.ConvertToJSON(System.Object)">
            <summary>
            Convert the value of an attribute to a string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSFormat.DSFileAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Syncytium.Common.Database.DSAnnotation.DSFormat.DSFormatAttribute">
            <summary>
            Master class of Controls done by Differential Synchronization Schema Description
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSFormat.DSFormatAttribute.ConvertFromJSON(System.Object)">
            <summary>
            Convert a given value into a value matching within the expected type of the column
            Network -> Record
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSFormat.DSFormatAttribute.ConvertToJSON(System.Object)">
            <summary>
            Convert a given value from a record to another type
            Record -> Network
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSFormat.DSFormatAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Syncytium.Common.Database.DSAnnotation.DSFormat.DSSequenceAttribute">
            <summary>
            Class identifying the field as a sequence
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSFormat.DSSequenceAttribute.Type">
            <summary>
            Annotation type
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSFormat.DSSequenceAttribute.Key">
            <summary>
            Key value
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSFormat.DSSequenceAttribute.Length">
            <summary>
            Key value
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSFormat.DSSequenceAttribute.ToJSON">
            <summary>
            Build an annotation into a Json
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSFormat.DSSequenceAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Syncytium.Common.Database.DSAnnotation.DSFormat.DSMaskAttribute">
            <summary>
            Class identifying the field as a mask (string within a given format)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSFormat.DSMaskAttribute.Type">
            <summary>
            Annotation type
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSFormat.DSMaskAttribute.Mask">
            <summary>
            Mask value
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSFormat.DSMaskAttribute.ToJSON">
            <summary>
            Build an annotation into a Json
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSFormat.DSMaskAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Syncytium.Common.Database.DSAnnotation.DSFormat.SyncytiumasswordAttribute">
            <summary>
            Class identifying the field as a password field
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSFormat.SyncytiumasswordAttribute.Type">
            <summary>
            Annotation type
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSFormat.SyncytiumasswordAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Syncytium.Common.Database.DSAnnotation.DSNameAttribute">
            <summary>
            Class defining the field name attached to the attribute
            Used by the client interface to write the right label
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSNameAttribute.Name">
            <summary>
            Field name
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSNameAttribute.Type">
            <summary>
            Annotation type
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSNameAttribute.ToJSON">
            <summary>
            Build an annotation into a Json
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSNameAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Syncytium.Common.Database.DSAnnotation.DSLotAttribute">
            <summary>
            Class defining a restriction view of the field or of the table
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSLotAttribute.Size">
            <summary>
            Define the maximum lot size of the request
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSLotAttribute.Capacity">
            <summary>
            Define the capacity into the cache of the table
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSLotAttribute.Type">
            <summary>
            Annotation type
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSLotAttribute.ToJSON">
            <summary>
            Build an annotation into a Json
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSLotAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Syncytium.Common.Database.DSAnnotation.DSRestrictedAttribute">
            <summary>
            Class defining a restriction view of the field or of the table
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSRestrictedAttribute.Profile">
            <summary>
            Define the profile allowed to view the field (by default: nobody can show this field)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSRestrictedAttribute.Area">
            <summary>
            Define the area attached to the field or the table (by default: all areas)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSRestrictedAttribute.Action">
            <summary>
            Define the action authorized attached to the field or the table (by default: all actions)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSAnnotation.DSRestrictedAttribute.Type">
            <summary>
            Annotation type
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSRestrictedAttribute.ToJSON">
            <summary>
            Build an annotation into a Json
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSRestrictedAttribute.IsRestricted(System.Collections.Generic.IEnumerable{Syncytium.Common.Database.DSAnnotation.DSRestrictedAttribute},System.String,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile,System.String)">
            <summary>
            This static function checks if the list of restrictions limits the access to the element
            on depends on the current area and the current profile
            </summary>
            <param name="restrictions"></param>
            <param name="area">Null, "Create", "Update" or "Delete"</param>
            <param name="profile"></param>
            <param name="action"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSAnnotation.DSRestrictedAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Syncytium.Common.Database.DSModel.ConnectionRecord">
            <summary>
            This table stores current connection information to avoid that the same user is
            connected twice to the application on the same machine.
            
            In case of auto-scale(as the features allowed by the cloud azure), a user can be
            connected to a server and can be switched to another server in case of abnormal
            situation.
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.ConnectionRecord.ConnectionId">
            <summary>
            Current connection Id of the user
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.ConnectionRecord.Machine">
            <summary>
            Name of the machine running the server
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.ConnectionRecord.UserId">
            <summary>
            User Id of the user authenticated and connected to the application
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.ConnectionRecord.Allow">
            <summary>
            Indicates if the connection is allowed to send request or to receive notification
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.ConnectionRecord.Profile">
            <summary>
            User's profile
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.ConnectionRecord.Area">
            <summary>
            Current Area (module) of the user
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.ConnectionRecord.ModuleId">
            <summary>
            ModuleId of the user (action launched within its connection)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.ConnectionRecord.Status">
            <summary>
            Indicates if the connection is initialized or not
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.ConnectionRecord.ConnectionDate">
            <summary>
            Timestamp of the first connection
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.ConnectionRecord.ConnectionLast">
            <summary>
            Timestamp of the last exchange
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.ConnectionRecord.CustomerId">
            <summary>
            CustomerId attached to the connection
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSModel.ConnectionRecord.ToString">
            <summary>
            Convert the record into a string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncytium.Common.Database.DSModel.DSRecord">
            <summary>
            Master class of the record description
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.DSRecord.Id">
            <summary>
            Id of the record
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.DSRecord._tick">
            <summary>
            Last tick updated
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.DSRecord._deleted">
            <summary>
            Indicates if the record is deleted or not
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSModel.DSRecord.ToString">
            <summary>
            Retrieve the string of a factory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSModel.DSRecord.ToJSON">
            <summary>
            Get a JSON object of the record
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSModel.DSRecord.GetHashCode">
            <summary>
            Must be declared within overriding Equals
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSModel.DSRecord.Equals(System.Object)">
            <summary>
            Check if 2 records are equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSModel.DSRecord.LogDifferences(System.Object)">
            <summary>
            Put in the log file the fields different between 2 records
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSModel.DSRecord.Copy(Syncytium.Common.Database.DSModel.DSRecord)">
            <summary>
            Duplicate a record
            </summary>
            <param name="record"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSModel.DSRecord.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSModel.DSRecord.#ctor(Syncytium.Common.Database.DSModel.DSRecord)">
            <summary>
            Constructor by copy
            </summary>
            <param name="copy"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSModel.DSRecord.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:Syncytium.Common.Database.DSModel.DSRecordWithHistory">
            <summary>
            Master class of the history description of a record
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.DSRecordWithHistory.HistoryUserId">
            <summary>
            CustomerId attached to the table
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.DSRecordWithHistory.HistoryNature">
            <summary>
            CustomerId attached to the table
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.DSRecordWithHistory.HistoryDate">
            <summary>
            CustomerId attached to the table
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSModel.DSRecordWithHistory.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSModel.DSRecordWithHistory.#ctor(Syncytium.Common.Database.DSModel.DSRecordWithHistory)">
            <summary>
            Constructor by copy
            </summary>
            <param name="copy"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSModel.DSRecordWithHistory.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:Syncytium.Common.Database.DSModel.DSRecordWithCustomerId">
            <summary>
            Master class of the record description
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.DSRecordWithCustomerId.CustomerId">
            <summary>
            CustomerId attached to the table
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSModel.DSRecordWithCustomerId.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSModel.DSRecordWithCustomerId.#ctor(Syncytium.Common.Database.DSModel.DSRecordWithCustomerId)">
            <summary>
            Constructor by copy
            </summary>
            <param name="copy"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSModel.DSRecordWithCustomerId.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:Syncytium.Common.Database.DSModel.InformationRecord">
            <summary>
            This table stores some details about a record into the database:
               - Creation information(used to link 2 requests by the ids from the client)
               - Update information(used to synchronize data and to check if somebody has updated record at the same time)
               - Delete information(any record are physically deleted in the database schema - virtual deleted)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.InformationRecord.Table">
            <summary>
            Table name
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.InformationRecord.Id">
            <summary>
            Id of the record into the table
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.InformationRecord.CustomerId">
            <summary>
            CustomerId of the record from the client side of the CreateUserId
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.InformationRecord.CreateId">
            <summary>
            Id of the record from the client side of the CreateUserId
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.InformationRecord.CreateUserId">
            <summary>
            UserId having created this record
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.InformationRecord.CreateTick">
            <summary>
            Tick having created this record
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.InformationRecord.CreateDate">
            <summary>
            Timestamp of the creation
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.InformationRecord.UpdateUserId">
            <summary>
            Last UserId having updated this record
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.InformationRecord.UpdateTick">
            <summary>
            Last Tick having updated this record
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.InformationRecord.UpdateDate">
            <summary>
            Timestamp of the last update
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.InformationRecord.DeleteUserId">
            <summary>
            UserId having deleted this record
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.InformationRecord.DeleteTick">
            <summary>
            Tick having deleted this record
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.InformationRecord.DeleteDate">
            <summary>
            Timestamp of the deletion
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSModel.InformationRecord.ToString">
            <summary>
            Convert the record into a string
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.InformationRecord.Tick">
            <summary>
            Last tick of the information
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.InformationRecord.IsDeleted">
            <summary>
            Indicates if the record is deleted
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSModel.InformationRecord.Copy(Syncytium.Common.Database.DSModel.InformationRecord)">
            <summary>
            Duplicate the information record
            </summary>
            <param name="informationRecord"></param>
            <returns></returns>
        </member>
        <member name="T:Syncytium.Common.Database.DSModel.ParameterRecord">
            <summary>
            This tables stores some internal parameters managed by the application itself
            For example:
             * Database.Version : current version of the database (based on the upgrade script)
             * Database.Update  : date time of the last upgrade
             * Database.Tick    : Last tick having updated the database
                     (different that Timestamp - in same case, you may have the same timestamp for 2 updates)
                     (by using a Tick, you are sure to have 2 differents values for 2 updates)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.ParameterRecord.Key">
            <summary>
            Key of the parameter
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.ParameterRecord.Value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSModel.ParameterRecord.ToString">
            <summary>
            Convert the record into a string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncytium.Common.Database.DSModel.PingRecord">
            <summary>
            This table stores the last ping received by the server from a client
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.PingRecord.ConnectionId">
            <summary>
            Connection id
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.PingRecord.Date">
            <summary>
            Date and time of the last received ping
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSModel.PingRecord.ToString">
            <summary>
            Convert the record into a string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncytium.Common.Database.DSModel.RequestIdRecord">
            <summary>
            This table stores for each userId the last requestId (for synchronization).
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.RequestIdRecord.UserId">
            <summary>
            UserId of the requester
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.RequestIdRecord.RequestId">
            <summary>
            Last requestId of the requester
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.RequestIdRecord.Date">
            <summary>
            Timestamp of the last request
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSModel.RequestIdRecord.ToString">
            <summary>
            Convert the record into a string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncytium.Common.Database.DSModel.RequestRecord">
            <summary>
            This table stores all requests received (except the details). Just for traceability.
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.RequestRecord.Id">
            <summary>
            Id of the request
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.RequestRecord.ConnectionId">
            <summary>
            Current connection Id of the user
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.RequestRecord.CustomerId">
            <summary>
            CustomerId attached to the request
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.RequestRecord.UserId">
            <summary>
            UserId of the requester
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.RequestRecord.RequestId">
            <summary>
            RequestId of the requester
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.RequestRecord.Profile">
            <summary>
            User's profile
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.RequestRecord.Area">
            <summary>
            Area of the request (Administration, Customer, ...)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.RequestRecord.ModuleId">
            <summary>
            ModuleId of the user (action launched within its request)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.RequestRecord.Label">
            <summary>
            Label of the request sent by the client
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.RequestRecord.Request">
            <summary>
            Request sent by the client
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.RequestRecord.Transaction">
            <summary>
            True if the request is a transaction
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.RequestRecord.Notify">
            <summary>
            True if the client must be notified by its own request
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.RequestRecord.Service">
            <summary>
            Service name
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.RequestRecord.ReceptionDate">
            <summary>
            Timestamp of the reception
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.RequestRecord.ExecutionDate">
            <summary>
            Timestamp of the execution
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.RequestRecord.Acknowledge">
            <summary>
            True if the request was successfully run
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSModel.RequestRecord.ToString">
            <summary>
            Convert the record into a string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncytium.Common.Database.DSModel.RequestTableRecord">
            <summary>
            This table stores all tables called by the requests received (except the details) - For traceability and updating a cache
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.RequestTableRecord.CustomerId">
            <summary>
            CustomerId attached to the request
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.RequestTableRecord.Tick">
            <summary>
            Tick of the request
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.RequestTableRecord.UserId">
            <summary>
            UserId of the requester
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.RequestTableRecord.RequestId">
            <summary>
            RequestId of the requester
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.RequestTableRecord.Table">
            <summary>
            Table of the request (table into the database)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.RequestTableRecord.Action">
            <summary>
            Action of the request (Create, Update, Delete or ... anything else)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.RequestTableRecord.Id">
            <summary>
            Id of the object concerned by this action
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSModel.RequestTableRecord.ToString">
            <summary>
            Convert the record into a string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncytium.Common.Database.DSModel.SequenceIdRecord">
            <summary>
            This table stores for each tuple(userId, table) the last sequence id generated (for synchronization).
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.SequenceIdRecord.UserId">
            <summary>
            UserId
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.SequenceIdRecord.Table">
            <summary>
            Table name
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.SequenceIdRecord.SequenceId">
            <summary>
            Greatest sequence Id in the table for the user
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSModel.SequenceIdRecord.Date">
            <summary>
            Timestamp of the last request
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSModel.SequenceIdRecord.ToString">
            <summary>
            Convert the record into a string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncytium.Common.Database.DSModel.HistoryNature">
            <summary>
            Handle the list of rights included into the application
            </summary>
        </member>
        <member name="T:Syncytium.Common.Database.DSModel.HistoryNature.EHistoryNature">
            <summary>
            Describe the enumeration of all profiles
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSModel.HistoryNature.EHistoryNature.Create">
            <summary>Creation</summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSModel.HistoryNature.EHistoryNature.Update">
            <summary>Update</summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSModel.HistoryNature.EHistoryNature.Delete">
            <summary>Delete</summary>
        </member>
        <member name="T:Syncytium.Common.Database.DSModel.UserProfile">
            <summary>
            Handle the list of rights included into the application
            </summary>
        </member>
        <member name="T:Syncytium.Common.Database.DSModel.UserProfile.EUserProfile">
            <summary>
            Describe the enumeration of all profiles
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSModel.UserProfile.EUserProfile.Administrator">
            <summary>All rights</summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSModel.UserProfile.EUserProfile.Supervisor">
            <summary>Agent creating some elements (ation plan, ...)</summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSModel.UserProfile.EUserProfile.User">
            <summary>Agent executing tasks</summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSModel.UserProfile.EUserProfile.Other">
            <summary>Read only</summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSModel.UserProfile.EUserProfile.None">
            <summary>Nothing allowed</summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSModel.UserProfile.IsInRole(Syncytium.Common.Database.DSModel.UserProfile.EUserProfile,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile)">
            <summary>
            Check if the profile given in parameter is allowed for the current profile
            </summary>
            <param name="userProfile"></param>
            <param name="profile"></param>
            <returns></returns>
        </member>
        <member name="T:Syncytium.Common.Database.DSSchema.DSCache">
            <summary>
            Handle for every tuple (connectionId, table, id) the flag IsConcerned and the record
            
            Before and After the execution of a request or a list of requests
            
            Retrieve the difference between Before and After
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSCache.MODULE">
            <summary>
            Module name used into the log file
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSCache.IsVerboseAll">
            <summary>
            Indicates if the all verbose mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSCache.IsVerbose">
            <summary>
            Indicates if the verbose mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSCache.Verbose(System.String)">
            <summary>
            Log a verbose message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSCache.IsDebug">
            <summary>
            Indicates if the debug mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSCache.Debug(System.String)">
            <summary>
            Log a debug message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSCache.Info(System.String)">
            <summary>
            Log an info message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSCache.Warn(System.String)">
            <summary>
            Log a warn message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSCache.Error(System.String)">
            <summary>
            Log an error message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSCache.Exception(System.String,System.Exception)">
            <summary>
            Log an exception message
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSCache._schema">
            <summary>
            Schema attached to this cache
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSCache._tables">
            <summary>
            Handle the list of tables by order of priority
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSCache.Tables">
            <summary>
            Handle the list of tables by order of priority
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSCache._reverseTables">
            <summary>
            Build a reverse list before running the difference
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSCache._before">
            <summary>
            Indicates if it's before / after the execution requests
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSCache._recordBefore">
            <summary>
            Handle a cache of DSRecord for the status before (to avoid too much allocation memory)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSCache._recordAfter">
            <summary>
            Handle a cache of DSRecord for the status after(to avoid too much allocation memory)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSCache._differences">
            <summary>
            Handle a cache of DSRecord for a connectionId before/after the request execution
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSCache._currentDifference">
            <summary>
            Reference on the current cache (_connectionId, old or new)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSCache._currentRecords">
            <summary>
            Reference on the current cache (_connectionId, old or new)
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSCache._currentConnection">
            <summary>
            Store the current connectionId
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSCache.AddTable(System.String)">
            <summary>
            Add a new table into the cache
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSCache.SetBefore(System.String)">
            <summary>
            Set the current cache to the cache corresponding before execution requests
            </summary>
            <param name="connectionId"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSCache.SetAfter(System.String)">
            <summary>
            Set the current cache to the cache corresponding after execution requests
            </summary>
            <param name="connectionId"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSCache.GetRecord(Syncytium.Common.Database.DatabaseContext,System.String,System.Int32)">
            <summary>
            Retrieve a record stored into the cache to avoid to read it into the database
            </summary>
            <param name="dbContext"></param>
            <param name="table"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSCache.SetRecord(Syncytium.Common.Database.DatabaseContext,System.String,System.Int32,Syncytium.Common.Database.DSModel.DSRecord,Syncytium.Common.Database.DSModel.InformationRecord)">
            <summary>
            Set a new record into the cache to avoid to read it multiply into the database
            </summary>
            <param name="dbContext"></param>
            <param name="table"></param>
            <param name="id"></param>
            <param name="record"></param>
            <param name="informationAlreadyRead"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSCache.Is(System.String,System.Int32)">
            <summary>
            Retrieve the status of the couple (table, id)
            </summary>
            <param name="table"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSCache.Set(System.String,System.Int32,Syncytium.Common.Database.DSModel.DSRecord)">
            <summary>
            Update the status of the couple (table, id)
            </summary>
            <param name="table"></param>
            <param name="id"></param>
            <param name="record"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSCache.GetDifferences(System.String)">
            <summary>
            Retrieve the list of differences into the cache for a given connection
            </summary>
            <param name="connectionId"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSCache.#ctor(Syncytium.Common.Database.DSSchema.DSDatabase)">
            <summary>
            Empty constructor
            </summary>
            <param name="schema"></param>
        </member>
        <member name="T:Syncytium.Common.Database.DSSchema.DSColumn">
            <summary>
            Describes the column structure
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSColumn.Property">
            <summary>
            Handle of the property attached to this column
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSColumn.SourceProperty">
            <summary>
            Handle of the property attached to this column attached into the history table
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSColumn.ColumnName">
            <summary>
            Column name into the table
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSColumn.Field">
            <summary>
            Field name from the multilingual dictionary
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSColumn.DefaultValue">
            <summary>
            Store the default value of the column
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSColumn.Sequence">
            <summary>
            Sequence annotation of the column
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSColumn.Formats">
            <summary>
            List of format annotations attached to the field
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSColumn.Controls">
            <summary>
            List of control annotations attached to the field
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSColumn.Constraints">
            <summary>
            List of constraint annotations attached to the field
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSColumn.Restriction">
            <summary>
            List of restricted annotations attached to the field
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSColumn.IsNullable">
            <summary>
            Notify the fact that the property can be null
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSColumn.Type">
            <summary>
            Get the type of the column (if nullable, get the sub type)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSColumn.IsKey">
            <summary>
            Indicates if the field is a key or not
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSColumn.IsEnum">
            <summary>
            Indicates if the column is an enumerable value or not
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSColumn.ForeignKey">
            <summary>
            Get the foreign key constraints of this column
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSColumn.Unique">
            <summary>
            Get the unique constraints of this column
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSColumn.MODULE">
            <summary>
            Module name used into the log file
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSColumn.IsVerboseAll">
            <summary>
            Indicates if the all verbose mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSColumn.IsVerbose">
            <summary>
            Indicates if the verbose mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSColumn.Verbose(System.String)">
            <summary>
            Log a verbose message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSColumn.IsDebug">
            <summary>
            Indicates if the debug mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSColumn.Debug(System.String)">
            <summary>
            Log a debug message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSColumn.Info(System.String)">
            <summary>
            Log an info message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSColumn.Warn(System.String)">
            <summary>
            Log a warn message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSColumn.Error(System.String)">
            <summary>
            Log an error message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSColumn.Exception(System.String,System.Exception)">
            <summary>
            Log an exception message
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSColumn.GetJSONEnumerableType(System.Type)">
            <summary>
            Retrieve an enumerable type
            </summary>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSColumn.GetJSONTypeName">
            <summary>
            Get the type name of the property
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSColumn.ToJSON(System.String,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile)">
            <summary>
            Convert the column into JSON
            </summary>
            <param name="area">if null, everything, else columns having the restriction to the area</param>
            <param name="profile">if None, everything, else columns having the restriction to the profile</param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSColumn.ConvertFromJSON(System.Object,Syncytium.Common.Error.Errors,System.Boolean@)">
            <summary>
            Convert a given value into a value matching within the expected type of the column
            Network -> Record
            </summary>
            <param name="value"></param>
            <param name="errors">List of errors identified</param>
            <param name="conversionOK">return true if the given value can be converted into the target type</param>
            <returns>the value converted</returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSColumn.ConvertToJSON(System.Object,Syncytium.Common.Error.Errors,System.Boolean@)">
            <summary>
            Convert a given value from a record to another type
            Record -> Network
            </summary>
            <param name="value"></param>
            <param name="errors">List of errors identified</param>
            <param name="conversionOK">return true if the given value can be converted into the target type</param>
            <returns>the value converted</returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSColumn.CheckProperties(System.Object,Syncytium.Common.Error.Errors,System.Boolean@,System.Boolean)">
            <summary>
            Check the given value within all controls (see DSColumn.js too)
            </summary>
            <param name="value"></param>
            <param name="errors">List of errors identified</param>
            <param name="conversionOK">return true if the given value can be converted into the target type</param>
            <param name="check"></param>
            <returns>the value to set</returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSColumn.#ctor(Syncytium.Common.Database.DSSchema.DSDatabase,System.String,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Build  a column description
            </summary>
            <param name="databaseSchema"></param>
            <param name="tableName"></param>
            <param name="property"></param>
            <param name="defaultInstance"></param>
        </member>
        <member name="T:Syncytium.Common.Database.DSSchema.DSDatabase">
            <summary>
            Description of all tables handled by the application
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSDatabase.Schema">
            <summary>
            Class containing the schema of the database (it derives from DbContext)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSDatabase.Tables">
            <summary>
            List of all tables described into the schema
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSDatabase._request">
            <summary>
            Reference on a class having the ability to execute a request different than "Create", "Update" or "Delete"
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSDatabase.MODULE">
            <summary>
            Module name used into the log file
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.IsVerboseAll">
            <summary>
            Indicates if the all verbose mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.IsVerbose">
            <summary>
            Indicates if the verbose mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.Verbose(System.String)">
            <summary>
            Log a verbose message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.IsDebug">
            <summary>
            Indicates if the debug mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.Debug(System.String)">
            <summary>
            Log a debug message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.Info(System.String)">
            <summary>
            Log an info message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.Warn(System.String)">
            <summary>
            Log a warn message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.Error(System.String)">
            <summary>
            Log an error message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.Exception(System.String,System.Exception)">
            <summary>
            Log an exception message
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.ToJSON(System.String,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile,Syncytium.Common.Database.DSSchema.DSCache)">
            <summary>
            Convert the schema into JSON
            </summary>
            <param name="area">if null, all tables, else tables and columns having the restriction to the area</param>
            <param name="profile">if None, all tables, else tables and columns having the restriction to the profile</param>
            <param name="cache">if null, no order, else list of tables in the expected order</param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.ToString">
            <summary>
            Convert the schame into a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.ReadTable(Syncytium.Common.Database.DatabaseContext,System.String,System.Int32,System.Int32,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile,System.String,System.Nullable{System.Int32},System.Collections.Generic.List{Syncytium.Common.Database.DSModel.DSRecord})">
            <summary>
            Retrieve for each row in the database for the given table,
            Each columns within only the expected columns due to the restriction in area and profile
            </summary>
            <param name="database"></param>
            <param name="table"></param>
            <param name="customerId"></param>
            <param name="userId"></param>
            <param name="profile"></param>
            <param name="area"></param>
            <param name="recordId"></param>
            <param name="existingRecords">Define it to replace the loading into the database</param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.FilterRecord(Syncytium.Common.Database.DSModel.DSRecord,System.String,System.Int32,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile)">
            <summary>
            Build a dynamic record containing properties depending on the area and the profile
            </summary>
            <param name="record"></param>
            <param name="area"></param>
            <param name="userId"></param>
            <param name="profile"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.FilterRecord(Syncytium.Common.Database.DSModel.DSRecord,System.String,System.Int32,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile,Syncytium.Common.Database.DSSchema.DSRequest)">
            <summary>
            Build a dynamic record containing properties depending on the area and the profile
            </summary>
            <param name="record"></param>
            <param name="area"></param>
            <param name="userId"></param>
            <param name="profile"></param>
            <param name="request"></param>
            <returns>true if the record is filtered</returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.GetRecordId(Syncytium.Common.Database.DatabaseContext,System.Int32,System.String,System.String,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Look for the record Id of the request
            </summary>
            <param name="database"></param>
            <param name="userId"></param>
            <param name="table"></param>
            <param name="action"></param>
            <param name="record"></param>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.OnBeforeExecuteRequest(Syncytium.Common.Database.DatabaseContext,System.Int32,System.Int32,System.Int32,System.String,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile,System.String,System.String,System.Int32,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Execute a request on the database schema (Create, Update or Delete a record for an existing table)
            on depends on the restriction view for the area and the profile
            </summary>
            <param name="database"></param>
            <param name="tick"></param>
            <param name="customerId"></param>
            <param name="userId"></param>
            <param name="area"></param>
            <param name="profile"></param>
            <param name="table"></param>
            <param name="action"></param>
            <param name="id"></param>
            <param name="record"></param>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.ExecuteRequest(Syncytium.Common.Database.DatabaseContext,Syncytium.Common.Database.DSSchema.DSTransaction,System.Collections.Generic.List{Syncytium.Common.Database.DSSchema.DSRequest})">
            <summary>
            Execute a request on the database schema (Create, Update or Delete a record for an existing table)
            on depends on the restriction view for the area and the profile
            </summary>
            <param name="database"></param>
            <param name="transaction"></param>
            <param name="lot"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.OnAfterExecuteRequest(Syncytium.Common.Database.DatabaseContext,System.Int32,System.Int32,System.Int32,System.String,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile,System.String,System.String,System.Int32,Syncytium.Common.Database.DSModel.DSRecord)">
            <summary>
            Execute a request on the database schema (Create, Update or Delete a record for an existing table)
            on depends on the restriction view for the area and the profile
            </summary>
            <param name="database"></param>
            <param name="tick"></param>
            <param name="customerId"></param>
            <param name="userId"></param>
            <param name="area"></param>
            <param name="profile"></param>
            <param name="table"></param>
            <param name="action"></param>
            <param name="id"></param>
            <param name="record"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.ExecuteRequestCustom(Syncytium.Common.Database.DatabaseContext,System.Int32,System.Int32,System.String,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile,System.String,System.Collections.Generic.List{Syncytium.Common.Database.DSSchema.DSRequest})">
            <summary>
            Execute a request on the database schema (other than Create, Update or Delete)
            </summary>
            <param name="database"></param>
            <param name="customerId"></param>
            <param name="userId"></param>
            <param name="area"></param>
            <param name="profile"></param>
            <param name="table"></param>
            <param name="lot"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.OnBeforeCreateRecord(Syncytium.Common.Database.DatabaseContext,System.Int32,System.String,System.Int32,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            This function is called before creating the record ... used to complete the creation
            </summary>
            <param name="database"></param>
            <param name="tick"></param>
            <param name="table"></param>
            <param name="id"></param>
            <param name="record"></param>
            <param name="identity"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.OnBeforeUpdateRecord(Syncytium.Common.Database.DatabaseContext,System.Int32,System.String,System.Int32,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            This function is called before updating the record ... used to complete the update
            </summary>
            <param name="database"></param>
            <param name="tick"></param>
            <param name="table"></param>
            <param name="id"></param>
            <param name="record"></param>
            <param name="identity"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.OnBeforeDeleteRecord(Syncytium.Common.Database.DatabaseContext,System.Int32,System.String,System.Int32,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            This function is called before deleting the record ... used to complete the deletion
            </summary>
            <param name="database"></param>
            <param name="tick"></param>
            <param name="table"></param>
            <param name="id"></param>
            <param name="record"></param>
            <param name="identity"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.OnAfterCreateRecord(Syncytium.Common.Database.DatabaseContext,System.Int32,System.String,Syncytium.Common.Database.DSModel.DSRecord)">
            <summary>
            This function is called after creating the record ... used to complete the creation
            </summary>
            <param name="database"></param>
            <param name="tick"></param>
            <param name="table"></param>
            <param name="record"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.OnAfterUpdateRecord(Syncytium.Common.Database.DatabaseContext,System.Int32,System.String,Syncytium.Common.Database.DSModel.DSRecord)">
            <summary>
            This function is called after updating the record ... used to complete the update
            </summary>
            <param name="database"></param>
            <param name="tick"></param>
            <param name="table"></param>
            <param name="record"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.OnAfterDeleteRecord(Syncytium.Common.Database.DatabaseContext,System.Int32,System.String,Syncytium.Common.Database.DSModel.DSRecord)">
            <summary>
            This function is called after deleting the record ... used to complete the deletion
            </summary>
            <param name="database"></param>
            <param name="tick"></param>
            <param name="table"></param>
            <param name="record"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.GetArea(System.String)">
            <summary>
            Get the area containing into the area (namespace of the object)
            </summary>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.GetDirectory(System.Type)">
            <summary>
            Refer to the directory containing the picture of the enunmeration value
            </summary>
            <param name="enumeration"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSDatabase.#ctor(System.Type,Syncytium.Common.Database.DSSchema.IDSRequest)">
            <summary>
            Build the schema by introspection (tables, columns and properties)
            </summary>
            <param name="schema">Type of DbContext</param>
            <param name="request"></param>
        </member>
        <member name="T:Syncytium.Common.Database.DSSchema.DSTable">
            <summary>
            Describes the table structure
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSTable.Name">
            <summary>
            Name of the table into the Database
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSTable.Area">
            <summary>
            Area including this table
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSTable.LotSize">
            <summary>
            The maximum lot size of the table
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSTable.Capacity">
            <summary>
            The capacity of the table into the cache
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSTable.Property">
            <summary>
            Handle of the property attached into the database schema
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSTable.Table">
            <summary>
            Class containing the table description
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSTable.SourceTable">
            <summary>
            Class containing the table description in case of a history table
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSTable.SourceTableName">
            <summary>
            Class containing the table description in case of a history table
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSTable.Columns">
            <summary>
            List of columns in the order read into the schema
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSTable.ColumnsByName">
            <summary>
            List of columns sorted by name
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSTable.Restriction">
            <summary>
            List of restricted annotations attached to the table
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSTable.Allow">
            <summary>
            List of allow annotations attached to the table
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSTable._databaseSchema">
            <summary>
            Reference on the database schema master
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.DSSchema.DSTable._indexKey">
            <summary>
            Index of the column containing the key of the record
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSTable.MODULE">
            <summary>
            Module name used into the log file
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.IsVerboseAll">
            <summary>
            Indicates if the all verbose mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.IsVerbose">
            <summary>
            Indicates if the verbose mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.Verbose(System.String)">
            <summary>
            Log a verbose message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.IsDebug">
            <summary>
            Indicates if the debug mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.Debug(System.String)">
            <summary>
            Log a debug message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.Info(System.String)">
            <summary>
            Log an info message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.Warn(System.String)">
            <summary>
            Log a warn message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.Error(System.String)">
            <summary>
            Log an error message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.Exception(System.String,System.Exception)">
            <summary>
            Log an exception message
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.GetSequenceKey(Syncytium.Common.Database.DatabaseContext,Syncytium.Common.Database.DSSchema.DSColumn,System.Int32)">
            <summary>
            Retrieve the sequence of the record identified by id
            </summary>
            <param name="database"></param>
            <param name="column"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.GetIndexKey(Syncytium.Common.Database.DSSchema.DSColumn[])">
            <summary>
            Index of the key amongst the list of columns into the record
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.GetRecordById(Syncytium.Common.Database.DatabaseContext,System.Int32)">
            <summary>
            Retrieve the existing record into the table on depends on its Id
            </summary>
            <param name="database"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.GetRecordFromClient(Syncytium.Common.Database.DatabaseContext,System.Int32,System.Int32,System.String,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile,System.String,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.Boolean)">
            <summary>
            Extract from a JSON request the record containing and set correctly all properties
            In case of errors, an exception is raised
            </summary>
            <param name="database"></param>
            <param name="customerId"></param>
            <param name="userId"></param>
            <param name="area"></param>
            <param name="profile"></param>
            <param name="action"></param>
            <param name="record"></param>
            <param name="identity"></param>
            <param name="check"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.CreateRecord(Syncytium.Common.Database.DatabaseContext,System.Int32,System.Int32,System.String,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile,System.Collections.Generic.List{Syncytium.Common.Database.DSSchema.DSRequest})">
            <summary>
            Execute a request on creation into the database schema
            </summary>
            <param name="database"></param>
            <param name="customerId"></param>
            <param name="userId"></param>
            <param name="area"></param>
            <param name="profile"></param>
            <param name="lot"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.UpdateRecord(Syncytium.Common.Database.DatabaseContext,System.Int32,System.Int32,System.String,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile,System.Collections.Generic.List{Syncytium.Common.Database.DSSchema.DSRequest})">
            <summary>
            Execute a request on updating into the database schema
            </summary>
            <param name="database"></param>
            <param name="customerId"></param>
            <param name="userId"></param>
            <param name="area"></param>
            <param name="profile"></param>
            <param name="lot"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.DeleteRecord(Syncytium.Common.Database.DatabaseContext,System.Int32,System.Int32,System.String,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile,System.Collections.Generic.List{Syncytium.Common.Database.DSSchema.DSRequest})">
            <summary>
            Execute a request on deletion into the database schema
            </summary>
            <param name="database"></param>
            <param name="customerId"></param>
            <param name="userId"></param>
            <param name="area"></param>
            <param name="profile"></param>
            <param name="lot"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.ToJSON(System.String,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile)">
            <summary>
            Convert the table into JSON
            </summary>
            <param name="area">if null, all tables, else tables and columns having the restriction to the area</param>
            <param name="profile">if None, all tables, else tables and columns having the restriction to the profile</param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.ReadRecords(Syncytium.Common.Database.DatabaseContext)">
            <summary>
            Retrieve for all data contains into the table without any filter
            </summary>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.ReadRecords(Syncytium.Common.Database.DatabaseContext,System.Int32)">
            <summary>
            Retrieve for all data contains into the table without any filter
            </summary>
            <param name="database"></param>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.GetRecord(Syncytium.Common.Database.DatabaseContext,System.Int32,System.Int32)">
            <summary>
            Retrieve a given record
            </summary>
            <param name="database"></param>
            <param name="id"></param>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.ReadTable(Syncytium.Common.Database.DatabaseContext,System.Int32,System.Int32,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile,System.String,System.Nullable{System.Int32},System.Collections.Generic.List{Syncytium.Common.Database.DSModel.DSRecord})">
            <summary>
            Retrieve for each row in the database for the current table,
            Each columns within only the expected columns due to the restriction in area and profile
            </summary>
            <param name="database"></param>
            <param name="customerId"></param>
            <param name="userId"></param>
            <param name="profile"></param>
            <param name="area"></param>
            <param name="id"></param>
            <param name="existingRecords">Define it to replace the loading into the database</param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.FilterRecord(Syncytium.Common.Database.DSModel.DSRecord,System.String,System.Int32,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile)">
            <summary>
            Build a dynamic record containing properties depending on the area and the profile
            </summary>
            <param name="record"></param>
            <param name="area"></param>
            <param name="userId"></param>
            <param name="profile"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.FilterRecord(Syncytium.Common.Database.DSModel.DSRecord,System.String,System.Int32,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile,Syncytium.Common.Database.DSSchema.DSRequest)">
            <summary>
            Build a dynamic record containing properties depending on the area and the profile
            </summary>
            <param name="record"></param>
            <param name="area"></param>
            <param name="userId"></param>
            <param name="profile"></param>
            <param name="request"></param>
            <returns>true if the record is filtered</returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.GetRecordId(Syncytium.Common.Database.DatabaseContext,System.Int32,System.String,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Look for the record Id of the request
            </summary>
            <param name="database"></param>
            <param name="userId"></param>
            <param name="action"></param>
            <param name="record"></param>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.OnBeforeExecuteRequest(Syncytium.Common.Database.DatabaseContext,System.Int32,System.Int32,System.Int32,System.String,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile,System.String,System.Int32,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Execute a pretreatement before exeucting the request on the database schema (Create, Update or Delete a record for the current table)
            </summary>
            <param name="database"></param>
            <param name="tick"></param>
            <param name="customerId"></param>
            <param name="userId"></param>
            <param name="area"></param>
            <param name="profile"></param>
            <param name="action"></param>
            <param name="id"></param>
            <param name="record"></param>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.ExtractRecord(Syncytium.Common.Database.DatabaseContext,Syncytium.Common.Database.DSSchema.DSTransaction,Syncytium.Common.Database.DSSchema.DSRequest)">
            <summary>
            Extract from the request the record
            </summary>
            <param name="database"></param>
            <param name="transaction"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.ExecuteRequest(Syncytium.Common.Database.DatabaseContext,Syncytium.Common.Database.DSSchema.DSTransaction,System.String,System.Collections.Generic.List{Syncytium.Common.Database.DSSchema.DSRequest})">
            <summary>
            Execute a request on the database schema (Create, Update or Delete a record for the current table)
            on depends on the restriction view for the area and the profile
            </summary>
            <param name="database"></param>
            <param name="transaction"></param>
            <param name="action"></param>
            <param name="lot"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.OnAfterExecuteRequest(Syncytium.Common.Database.DatabaseContext,System.Int32,System.Int32,System.Int32,System.String,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile,System.String,System.Int32,Syncytium.Common.Database.DSModel.DSRecord)">
            <summary>
            Execute a request on the database schema (Create, Update or Delete a record for the current table)
            on depends on the restriction view for the area and the profile
            </summary>
            <param name="database"></param>
            <param name="tick"></param>
            <param name="customerId"></param>
            <param name="userId"></param>
            <param name="area"></param>
            <param name="profile"></param>
            <param name="action"></param>
            <param name="id"></param>
            <param name="record"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTable.#ctor(Syncytium.Common.Database.DSSchema.DSDatabase,System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Build the list of columns and properties of the given table
            </summary>
            <param name="databaseSchema"></param>
            <param name="propertyTable"></param>
            <param name="table"></param>
        </member>
        <member name="T:Syncytium.Common.Database.DSSchema.DSRequest">
            <summary>
            Uncompress and handle the transaction
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSRequest.Id">
            <summary>
            Id of the request
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSRequest.Table">
            <summary>
            Table name
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSRequest.Action">
            <summary>
            Action
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSRequest.Record">
            <summary>
            Detail of the request
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSRequest.Identity">
            <summary>
            Detail of identities
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSRequest.Tick">
            <summary>
            Tick of the last updated request
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSRequest.Request">
            <summary>
            Reference on the request into the transaction
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSRequest.RequestIndex">
            <summary>
            Index of the request into the compressed request
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSRequest.RecordId">
            <summary>
            Set the recordId of the request
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSRequest.NewTick">
            <summary>
            Set the tick value of the request after executing request
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSRequest.ToString">
            <summary>
            Convert the record into a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSRequest.SetRecord(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Update the property of the record pointed by the request
            </summary>
            <param name="attribute"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSRequest.UpdateRecord(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Update the current request before acknowledging the transaction
            </summary>
            <param name="newRecord"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSRequest.#ctor(System.Int32,System.String,System.String,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.Nullable{System.Int32},Newtonsoft.Json.Linq.JObject,System.Int32)">
            <summary>
            Describe a request from a transaction
            </summary>
            <param name="id"></param>
            <param name="table"></param>
            <param name="action"></param>
            <param name="record"></param>
            <param name="identity"></param>
            <param name="tick"></param>
            <param name="request"></param>
            <param name="requestIndex"></param>
        </member>
        <member name="T:Syncytium.Common.Database.DSSchema.DSTransaction">
            <summary>
            Uncompress and handle the transaction
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSTransaction.EventId">
            <summary>
            Event id into the table _Request
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSTransaction.ConnectionId">
            <summary>
            Current connection Id of the user
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSTransaction.CustomerId">
            <summary>
            CustomerId attached to the connection
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSTransaction.UserId">
            <summary>
            User Id of the user authenticated and connected to the application
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSTransaction.Profile">
            <summary>
            User's profile
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSTransaction.Area">
            <summary>
            Current Area (module) of the user
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSTransaction.ModuleId">
            <summary>
            ModuleId of the user
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSTransaction.RequestId">
            <summary>
            RequestId of the event
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSTransaction.Label">
            <summary>
            Label of the transaction
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSTransaction.Requests">
            <summary>
            List of all requests included into the transaction
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSTransaction.LotRequests">
            <summary>
            List of requests grouped by lot
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSTransaction.CompressedRequests">
            <summary>
            List of compressed requests included into the transaction
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSTransaction.Transaction">
            <summary>
            True if the transaction is a transaction, False if the transaction is just a request
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.DSSchema.DSTransaction.Notify">
            <summary>
            True if the notification must be sent to the caller
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTransaction.SetNewTick(System.Int32)">
            <summary>
            Add the tick value for every request
            </summary>
            <param name="tick"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTransaction.GetArrayIndex(Newtonsoft.Json.Linq.JObject,System.Int32)">
            <summary>
            Build a request from a compressed request
            </summary>
            <param name="records"></param>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.DSTransaction.#ctor(System.Int32,System.String,System.Int32,System.Int32,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile,System.String,System.Int32,System.Int32,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject[],System.Boolean,System.Boolean)">
            <summary>
            Convert a list of requests from the client into a transaction
            </summary>
            <param name="eventId"></param>
            <param name="connectionId"></param>
            <param name="customerId"></param>
            <param name="userId"></param>
            <param name="profile"></param>
            <param name="area"></param>
            <param name="moduleId"></param>
            <param name="requestId"></param>
            <param name="label"></param>
            <param name="requests">List of requests from the client</param>
            <param name="transaction"></param>
            <param name="notify"></param>
        </member>
        <member name="T:Syncytium.Common.Database.DSSchema.IDSRequest">
            <summary>
            This interface describes a class which can customize some features of the DSDatabase
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.IDSRequest.ExecuteRequest(Syncytium.Common.Database.DatabaseContext,System.Int32,System.Int32,System.Int32,System.String,Syncytium.Common.Database.DSModel.UserProfile.EUserProfile,System.String,System.String,System.Int32,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            This function returns a record corresponding to the request
            If something is wrong, throw ExceptionDefinitionRecord("ERR_REQUEST_UNKNOWN")
            </summary>
            <param name="database"></param>
            <param name="tick"></param>
            <param name="customerId"></param>
            <param name="userId"></param>
            <param name="area"></param>
            <param name="profile"></param>
            <param name="table"></param>
            <param name="action"></param>
            <param name="id"></param>
            <param name="record"></param>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.IDSRequest.OnBeforeCreateRecord(Syncytium.Common.Database.DatabaseContext,System.Int32,System.String,System.Int32,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            This function is called before creating the record ... used to complete the creation
            </summary>
            <param name="database"></param>
            <param name="tick"></param>
            <param name="table"></param>
            <param name="id"></param>
            <param name="record"></param>
            <param name="identity"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.IDSRequest.OnBeforeUpdateRecord(Syncytium.Common.Database.DatabaseContext,System.Int32,System.String,System.Int32,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            This function is called before updating the record ... used to complete the update
            </summary>
            <param name="database"></param>
            <param name="tick"></param>
            <param name="table"></param>
            <param name="id"></param>
            <param name="record"></param>
            <param name="identity"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.IDSRequest.OnBeforeDeleteRecord(Syncytium.Common.Database.DatabaseContext,System.Int32,System.String,System.Int32,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject)">
            <summary>
            This function is called before deleting the record ... used to complete the deletion
            </summary>
            <param name="database"></param>
            <param name="tick"></param>
            <param name="table"></param>
            <param name="id"></param>
            <param name="record"></param>
            <param name="identity"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.IDSRequest.OnAfterCreateRecord(Syncytium.Common.Database.DatabaseContext,System.Int32,System.String,Syncytium.Common.Database.DSModel.DSRecord)">
            <summary>
            This function is called after creating the record ... used to complete the creation
            </summary>
            <param name="database"></param>
            <param name="tick"></param>
            <param name="table"></param>
            <param name="record"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.IDSRequest.OnAfterUpdateRecord(Syncytium.Common.Database.DatabaseContext,System.Int32,System.String,Syncytium.Common.Database.DSModel.DSRecord)">
            <summary>
            This function is called after updating the record ... used to complete the update
            </summary>
            <param name="database"></param>
            <param name="tick"></param>
            <param name="table"></param>
            <param name="record"></param>
        </member>
        <member name="M:Syncytium.Common.Database.DSSchema.IDSRequest.OnAfterDeleteRecord(Syncytium.Common.Database.DatabaseContext,System.Int32,System.String,Syncytium.Common.Database.DSModel.DSRecord)">
            <summary>
            This function is called after deleting the record ... used to complete the deletion
            </summary>
            <param name="database"></param>
            <param name="tick"></param>
            <param name="table"></param>
            <param name="record"></param>
        </member>
        <member name="T:Syncytium.Common.Database.Provider.Firebird.Firebird">
            <summary>
            Handle the access to the firebird database
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.Provider.Firebird.Firebird.MODULE">
            <summary>
            Module name used into the log file
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.Provider.Firebird.Firebird.Type">
            <summary>
            Retrieve the database type implemented
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Firebird.Firebird.GetSQLExistTable(System.String)">
            <summary>
            Retrieve the SQL command corresponding to the existing table
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Firebird.Firebird.ParseSQLToken(System.String)">
            <summary>
            Parse a SQL file to retrieve token after token
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Firebird.Firebird.RemoveComment(System.String)">
            <summary>
            Remove the beginning of the line if '--' started the new command
            </summary>
            <param name="sqlCommand"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Firebird.Firebird.ParseSQLCommand(System.String)">
            <summary>
            Retrieve all SQL commands included into a script
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Firebird.Firebird.ExecuteScript(System.String)">
            <summary>
            Execute a SQL script
            The Oracle Data Provider can't execute a SQL script directly. In this function, we parse the script to execute insttruction by instruction.
            </summary>
            <param name="script"></param>
            <returns>true if the script has correctly run or false if something is wrong</returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Firebird.Firebird.ExistValue(System.Data.Entity.DbContextTransaction,System.Nullable{System.Int32},System.String,System.String,System.String,System.Boolean,System.Object,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Check if a value already exists into a table of the database and if this value is still alive
            </summary>
            <param name="transaction"></param>
            <param name="customerId"></param>
            <param name="table"></param>
            <param name="columnValue"></param>
            <param name="columnId"></param>
            <param name="caseSensitive"></param>
            <param name="value"></param>
            <param name="id"></param>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Firebird.Firebird.#ctor(System.Data.Common.DbConnection,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="database"></param>
            <param name="schema"></param>
        </member>
        <member name="T:Syncytium.Common.Database.Provider.MySQL.MySQL">
            <summary>
            Handle the access to the oracle database
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.Provider.MySQL.MySQL.MODULE">
            <summary>
            Module name used into the log file
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.Provider.MySQL.MySQL.Type">
            <summary>
            Retrieve the database type implemented
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.MySQL.MySQL.GetSQLExistTable(System.String)">
            <summary>
            Retrieve the SQL command corresponding to the existing table
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.MySQL.MySQL.ParseSQLToken(System.String)">
            <summary>
            Parse a SQL file to retrieve token after token
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.MySQL.MySQL.RemoveComment(System.String)">
            <summary>
            Remove the beginning of the line if '--' started the new command
            </summary>
            <param name="sqlCommand"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.MySQL.MySQL.ParseSQLCommand(System.String)">
            <summary>
            Retrieve all SQL commands included into a script
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.MySQL.MySQL.ExecuteScript(System.String)">
            <summary>
            Execute a SQL script
            The Oracle Data Provider can't execute a SQL script directly. In this function, we parse the script to execute insttruction by instruction.
            </summary>
            <param name="script"></param>
            <returns>true if the script has correctly run or false if something is wrong</returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.MySQL.MySQL.ExistValue(System.Data.Entity.DbContextTransaction,System.Nullable{System.Int32},System.String,System.String,System.String,System.Boolean,System.Object,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Check if a value already exists into a table of the database and if this value is still alive
            </summary>
            <param name="transaction"></param>
            <param name="customerId"></param>
            <param name="table"></param>
            <param name="columnValue"></param>
            <param name="columnId"></param>
            <param name="caseSensitive"></param>
            <param name="value"></param>
            <param name="id"></param>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.MySQL.MySQL.#ctor(System.Data.Common.DbConnection,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="database"></param>
            <param name="schema"></param>
        </member>
        <member name="T:Syncytium.Common.Database.Provider.Oracle.Oracle">
            <summary>
            Handle the access to the oracle database
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.Provider.Oracle.Oracle.MODULE">
            <summary>
            Module name used into the log file
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.Provider.Oracle.Oracle.Type">
            <summary>
            Retrieve the database type implemented
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Oracle.Oracle.GetSQLExistTable(System.String)">
            <summary>
            Retrieve the SQL command corresponding to the existing table
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Oracle.Oracle.ParseSQLToken(System.String)">
            <summary>
            Parse a SQL file to retrieve token after token
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Oracle.Oracle.RemoveComment(System.String)">
            <summary>
            Remove the beginning of the line if '--' started the new command
            </summary>
            <param name="sqlCommand"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Oracle.Oracle.ParseSQLCommand(System.String)">
            <summary>
            Retrieve all SQL commands included into a script
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Oracle.Oracle.ExecuteScript(System.String)">
            <summary>
            Execute a SQL script
            The Oracle Data Provider can't execute a SQL script directly. In this function, we parse the script to execute insttruction by instruction.
            </summary>
            <param name="script"></param>
            <returns>true if the script has correctly run or false if something is wrong</returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Oracle.Oracle.ExistValue(System.Data.Entity.DbContextTransaction,System.Nullable{System.Int32},System.String,System.String,System.String,System.Boolean,System.Object,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Check if a value already exists into a table of the database and if this value is still alive
            </summary>
            <param name="transaction"></param>
            <param name="customerId"></param>
            <param name="table"></param>
            <param name="columnValue"></param>
            <param name="columnId"></param>
            <param name="caseSensitive"></param>
            <param name="value"></param>
            <param name="id"></param>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Oracle.Oracle.#ctor(System.Data.Common.DbConnection,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="database"></param>
            <param name="schema"></param>
        </member>
        <member name="T:Syncytium.Common.Database.Provider.Provider">
            <summary>
            Handle the access to the database (base) because this class must be implemented on depends on the connection
            </summary>
        </member>
        <member name="T:Syncytium.Common.Database.Provider.Provider.EProvider">
            <summary>
            Database type handled by the application
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.Provider.Provider.EProvider.None">
            <summary>No database</summary>
        </member>
        <member name="F:Syncytium.Common.Database.Provider.Provider.EProvider.Oracle">
            <summary>Oracle database</summary>
        </member>
        <member name="F:Syncytium.Common.Database.Provider.Provider.EProvider.SQLServer">
            <summary>SQL Server database</summary>
        </member>
        <member name="F:Syncytium.Common.Database.Provider.Provider.EProvider.Firebird">
            <summary>Firebird database</summary>
        </member>
        <member name="F:Syncytium.Common.Database.Provider.Provider.EProvider.MySQL">
            <summary>MySQL database</summary>
        </member>
        <member name="F:Syncytium.Common.Database.Provider.Provider.EProvider.Unknown">
            <summary>Unknown database</summary>
        </member>
        <member name="F:Syncytium.Common.Database.Provider.Provider._database">
            <summary>
            Reference on the database connection
            </summary>
        </member>
        <member name="F:Syncytium.Common.Database.Provider.Provider.Schema">
            <summary>
            Store the schema of the database
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.Provider.Provider.MODULE">
            <summary>
            Module name used into the log file
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Provider.IsVerboseAll">
            <summary>
            Indicates if the all verbose mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Provider.IsVerbose">
            <summary>
            Indicates if the verbose mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Provider.Verbose(System.String)">
            <summary>
            Log a verbose message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Provider.IsDebug">
            <summary>
            Indicates if the debug mode is enabled or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Provider.Debug(System.String)">
            <summary>
            Log a debug message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Provider.Info(System.String)">
            <summary>
            Log an info message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Provider.Warn(System.String)">
            <summary>
            Log a warn message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Provider.Error(System.String)">
            <summary>
            Log an error message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Provider.Exception(System.String,System.Exception)">
            <summary>
            Log an exception message
            </summary>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="P:Syncytium.Common.Database.Provider.Provider.Type">
            <summary>
            Provider type
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Provider.GetSQLExistTable(System.String)">
            <summary>
            Retrieve the SQL command corresponding to the existing table
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Provider.ExecuteScript(System.String)">
            <summary>
            Execute a SQL script
            </summary>
            <param name="script"></param>
            <returns>true if the script has correctly run or false if something is wrong</returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Provider.ExistValue(System.Data.Entity.DbContextTransaction,System.Nullable{System.Int32},System.String,System.String,System.String,System.Boolean,System.Object,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Check if a value already exists into a table of the database and if this value is still alive
            </summary>
            <param name="transaction"></param>
            <param name="customerId"></param>
            <param name="table"></param>
            <param name="columnValue"></param>
            <param name="columnId"></param>
            <param name="caseSensitive"></param>
            <param name="value"></param>
            <param name="id"></param>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.Provider.#ctor(System.Data.Common.DbConnection,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="database"></param>
            <param name="schema"></param>
        </member>
        <member name="T:Syncytium.Common.Database.Provider.SQLServer.SQLServer">
            <summary>
            Handle the access to the SQL Server database
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.Provider.SQLServer.SQLServer.MODULE">
            <summary>
            Module name used into the log file
            </summary>
        </member>
        <member name="P:Syncytium.Common.Database.Provider.SQLServer.SQLServer.Type">
            <summary>
            Retrieve the database type implemented
            </summary>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.SQLServer.SQLServer.GetSQLExistTable(System.String)">
            <summary>
            Retrieve the SQL command corresponding to the existing table
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.SQLServer.SQLServer.GetSchema">
            <summary>
            Used by SQL to set the schema value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.SQLServer.SQLServer.ExecuteScript(System.String)">
            <summary>
            Execute a SQL script
            </summary>
            <param name="script"></param>
            <returns>true if the script has correctly run or false if something is wrong</returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.SQLServer.SQLServer.ExistValue(System.Data.Entity.DbContextTransaction,System.Nullable{System.Int32},System.String,System.String,System.String,System.Boolean,System.Object,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Check if a value already exists into a table of the database and if this value is still alive
            </summary>
            <param name="transaction"></param>
            <param name="customerId"></param>
            <param name="table"></param>
            <param name="columnValue"></param>
            <param name="columnId"></param>
            <param name="caseSensitive"></param>
            <param name="value"></param>
            <param name="id"></param>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Database.Provider.SQLServer.SQLServer.#ctor(System.Data.Common.DbConnection,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="database"></param>
            <param name="schema"></param>
        </member>
        <member name="T:Syncytium.Common.Error.Error">
            <summary>
            This class handles an error and its parameters
            </summary>
        </member>
        <member name="P:Syncytium.Common.Error.Error.Message">
            <summary>
            Key label of the message
            </summary>
        </member>
        <member name="F:Syncytium.Common.Error.Error.Parameters">
            <summary>
            Set a list of parameters attached to the message
            </summary>
        </member>
        <member name="M:Syncytium.Common.Error.Error.ToJSON">
            <summary>
            Convert this class to JSON
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Error.Error.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Syncytium.Common.Error.Error.#ctor(System.String,System.Object[])">
            <summary>
            Constructor of the error message
            </summary>
            <param name="message"></param>
            <param name="parameters"></param>
        </member>
        <member name="T:Syncytium.Common.Error.Errors">
            <summary>
            This class handles a list of errors grouped by field
            </summary>
        </member>
        <member name="P:Syncytium.Common.Error.Errors.Fields">
            <summary>
            List of errors attached to a field
            </summary>
        </member>
        <member name="P:Syncytium.Common.Error.Errors.Global">
            <summary>
            List of errors not attached to a field
            </summary>
        </member>
        <member name="P:Syncytium.Common.Error.Errors.HasError">
            <summary>
            True if the class contains at least one error, else false
            </summary>
        </member>
        <member name="M:Syncytium.Common.Error.Errors.Clear">
            <summary>
            Clean up all messages in this handler
            </summary>
        </member>
        <member name="M:Syncytium.Common.Error.Errors.AddField(System.String,System.String,System.Object[])">
            <summary>
            Add a new message error into the handler and attach it to a field
            </summary>
            <param name="field"></param>
            <param name="message"></param>
            <param name="parameters">If a parameter contains {LANGUAGE_KEY}, it means that LANGUAGE_KEY must be replaced by the label of LANGUAGE_KEY for a given language</param>
        </member>
        <member name="M:Syncytium.Common.Error.Errors.AddGlobal(System.String,System.Object[])">
            <summary>
            Add a new message into the handler for a global aspect
            </summary>
            <param name="message"></param>
            <param name="parameters">If a parameter contains {LANGUAGE_KEY}, it means that LANGUAGE_KEY must be replaced by the label of LANGUAGE_KEY for a given language</param>
        </member>
        <member name="M:Syncytium.Common.Error.Errors.ToJSON">
            <summary>
            Convert this class to JSON
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Error.Errors.#ctor(System.String,System.Object[])">
            <summary>
            Constructor within a single message into the global part
            </summary>
            <param name="message"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Syncytium.Common.Error.Errors.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Syncytium.Common.Exception.Exception">
            <summary>
            This exception is the parent of all given exceptions done by this application
            </summary>
        </member>
        <member name="M:Syncytium.Common.Exception.Exception.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Syncytium.Common.Exception.Exception.#ctor(System.String)">
            <summary>
            Constructor within a message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Exception.Exception.#ctor(System.String,System.Exception)">
            <summary>
            Constructor within a message and it inner exception
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="T:Syncytium.Common.Exception.ExceptionAlreadyExists">
            <summary>
            This exception is raised when an element already exists (not multiple element allowed)
            </summary>
        </member>
        <member name="M:Syncytium.Common.Exception.ExceptionAlreadyExists.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Syncytium.Common.Exception.ExceptionAlreadyExists.#ctor(System.String)">
            <summary>
            Constructor within a message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Exception.ExceptionAlreadyExists.#ctor(System.String,System.Exception)">
            <summary>
            Constructor within a message and it inner exception
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="T:Syncytium.Common.Exception.ExceptionDefinitionRecord">
            <summary>
            This exception is raised when a record for the database contains some errors
            </summary>
        </member>
        <member name="P:Syncytium.Common.Exception.ExceptionDefinitionRecord.Errors">
            <summary>
            Retrieve the list of errors identified into the definition of the record
            </summary>
        </member>
        <member name="M:Syncytium.Common.Exception.ExceptionDefinitionRecord.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implemented to SerializableAttribute
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Syncytium.Common.Exception.ExceptionDefinitionRecord.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Syncytium.Common.Exception.ExceptionDefinitionRecord.#ctor(System.String,System.Object[])">
            <summary>
            Constructor within a message
            </summary>
            <param name="message"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Syncytium.Common.Exception.ExceptionDefinitionRecord.#ctor(System.String,Syncytium.Common.Error.Errors)">
            <summary>
            Constructor within a message and a list of errors
            </summary>
            <param name="message"></param>
            <param name="listOfErrors"></param>
        </member>
        <member name="M:Syncytium.Common.Exception.ExceptionDefinitionRecord.#ctor(System.String,System.Exception)">
            <summary>
            Constructor within a message and it inner exception
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="T:Syncytium.Common.Exception.ExceptionNotAuthorized">
            <summary>
            This exception is raised when an action is not authorized
            </summary>
        </member>
        <member name="M:Syncytium.Common.Exception.ExceptionNotAuthorized.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Syncytium.Common.Exception.ExceptionNotAuthorized.#ctor(System.String)">
            <summary>
            Constructor within a message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Exception.ExceptionNotAuthorized.#ctor(System.String,System.Exception)">
            <summary>
            Constructor within a message and it inner exception
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="T:Syncytium.Common.Exception.ExceptionNotFound">
            <summary>
            This exception is raised when an element doesn't exist into a collection
            </summary>
        </member>
        <member name="M:Syncytium.Common.Exception.ExceptionNotFound.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Syncytium.Common.Exception.ExceptionNotFound.#ctor(System.String)">
            <summary>
            Constructor within a message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Exception.ExceptionNotFound.#ctor(System.String,System.Exception)">
            <summary>
            Constructor within a message and it inner exception
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="T:Syncytium.Common.Exception.ExceptionNotImplemented">
            <summary>
            This exception is raised when a function is not yet implemented
            </summary>
        </member>
        <member name="M:Syncytium.Common.Exception.ExceptionNotImplemented.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Syncytium.Common.Exception.ExceptionNotImplemented.#ctor(System.String)">
            <summary>
            Constructor within a message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Exception.ExceptionNotImplemented.#ctor(System.String,System.Exception)">
            <summary>
            Constructor within a message and it inner exception
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="T:Syncytium.Common.Exception.ExceptionParse">
            <summary>
            This exception is raised when the format of an element is not correct
            </summary>
        </member>
        <member name="M:Syncytium.Common.Exception.ExceptionParse.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Syncytium.Common.Exception.ExceptionParse.#ctor(System.String)">
            <summary>
            Constructor within a message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Exception.ExceptionParse.#ctor(System.String,System.Exception)">
            <summary>
            Constructor within a message and it inner exception
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="T:Syncytium.Common.Managers.ConfigurationManager">
            <summary>
            Handle the configuration element (retrieve settings and eventually its default values)
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.APPLICATION">
            <summary>
            Application name
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.APPLICATION_VERSION">
            <summary>
            Version of the application
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.APPLICATION_COMPANY">
            <summary>
            Company of the application
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.APPLICATION_COPYRIGHT">
            <summary>
            Copyright of the application
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.CONNEXION_STRING">
            <summary>
            connectionString attached to the application
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.CONNEXION_STRING_AZURE">
            <summary>
            connectionString attached to the azure environment
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.SETTING_MODE">
            <summary>
            AppSettings describing the mode of the application DEV, UAT or PROD
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.SETTING_DEBUG">
            <summary>
            AppSettings describing the debug mode (true or false)
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.SETTING_DATABASE_TYPE">
            <summary>
            AppSettings describing the type of database used by the application
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.SETTING_DATABASE_SCHEMA">
            <summary>
            AppSettings describing the database schema to use in the application
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.SETTING_DATABASE_EXPECTED_VERSION">
            <summary>
            AppSettings describing the expected version of database schema
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.SETTING_DATABASE_CACHE">
            <summary>
            Enable / Disable the database cache manager (true or false)
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.SETTING_DEFAULT_LANGUAGE">
            <summary>
            AppSettings describing the default language of the application (on starting or on creating a user's profile)
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.SETTING_LOGGER_MAX_DAYS">
            <summary>
            AppSettings describing the max number of days to keep in the log folder
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.SETTING_APPDATA_MAX_DAYS">
            <summary>
            AppSettings describing the max number of days to keep a file into the ~/App_Data
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.SETTING_ADMINISTRATOR_LOGIN">
            <summary>
            AppSettings describing the default login of the administrator (first time or to upgrade database)
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.SETTING_ADMINISTRATOR_PASSWORD">
            <summary>
            AppSettings describing the default password of the administrator (first time or to upgrade database)
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.SETTING_CONNECTION_MAX_WAITING">
            <summary>
            AppSettings describing the number of seconds of waiting before considering that the user is already connected
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.SETTING_CONNECTION_CLEANUP">
            <summary>
            AppSettings notifying if all previous connections from the current machine must be cleaned up on starting
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.SETTING_CONNECTION_LOTSIZE">
            <summary>
            AppSettings describing the lot size for a list of notifications from the server to the client
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.SETTING_PASSWORD_EXPIRICYDAY">
            <summary>
            AppSettings describing the number of days of validity between the sending of the mail and the changement allowed
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.SETTING_CLIENT_LOG_ENABLE">
            <summary>
            AppSettings notifying if the log features must be enabled into the client side
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.SETTING_CLIENT_HUB_MAXSIZE">
            <summary>
            AppSettings describing the maximum size of the buffer cache in the client side (in Ko)
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.SETTING_CLIENT_HUB_TIMEOUT">
            <summary>
            AppSettings describing the timeout allowed of the websocket in seconds
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.SETTING_CLIENT_PDF_FONT">
            <summary>
            AppSettings describing the font used into the PDF file (see the documentation to get the list)
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.SETTING_HTTP_ROOT">
            <summary>
            HTTP address root of the application
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.SETTING_FILE_ROOT">
            <summary>
            File directory root of the application
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.SETTING_HEARTBEAT_DELAY">
            <summary>
            Delay in seconds between 2 heartbeats
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager._assembly">
            <summary>
            Store the current assembly of the application
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.Assembly">
            <summary>
            Retrieve or change the current assembly
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.ApplicationName">
            <summary>
            Retrieve the name of the application
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.ApplicationVersion">
            <summary>
            Retrieve the version of the application
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.ApplicationCompany">
            <summary>
            Retrieve the company of the application
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.ApplicationCopyright">
            <summary>
            Retrieve the copyright of the application
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.AppSettings">
            <summary>
            Reference the list of settings into the configuration file (app.config, web.config, ...)
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.ConnectionStrings">
            <summary>
            Reference the list of connection strings described into the configuration file (app.config, web.config, ...)
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager.Schemas">
            <summary>
            Store the current schema of the database to avoid to build it at each connection
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.Mode">
            <summary>
            Retrieve the mode of the application
            If the value is not defined or contains different than "DEV", "UAT" or "PROD", set DEV
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.IsLogEnabled">
            <summary>
            Retrieve the log mode enable or not defined into web.config
            If the value is not defined or contains different than "TRUE", "ON" or "1", set False
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.Debug">
            <summary>
            Retrieve the debug mode defined into web.config
            If the value is not defined or contains different than "TRUE", "VERBOSE", "ON" or "1", set False
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.Verbose">
            <summary>
            Retrieve the verbose mode defined into web.config
            If the value is not defined or contains different than "VERBOSE", set False
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.VerboseAll">
            <summary>
            Retrieve the verbose mode defined into web.config
            If the value is not defined or contains different than "VERBOSE", set False
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.DatabaseProvider">
            <summary>
            Retrieve the database type on depends on the configuration (based on the connexionString and the prodiver)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.DatabaseSchema">
            <summary>
            Retrieve the schema defined into web.config
            If the value is not defined, set "Syncytium"
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.DatabaseExpectedVersion">
            <summary>
            Retrieve the expected version of the database schema
            If the value is not defined or not an integer, set -1 (means - check database version within SQL Script files)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.DatabaseCache">
            <summary>
            Indicates if the cache manager of the database must be enabled or disabled
            default value: false
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.DefaultLanguage">
            <summary>
            Retrieve the default language defined into web.config
            If the value is not defined, set "FR" (must be a valid language)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.LoggerMaxDays">
            <summary>
            Retrieve the max number of days to keep in the log folder
            If the value is not defined or not an integer, set -1 (means keep all log files)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.AppDataMaxDays">
            <summary>
            Retrieve the max number of days to keep in the folder ~/App_Data
            If the value is not defined or not an integer, set -1 (means keep all files)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.AdministratorLogin">
            <summary>
            Retrieve the administrator login by default
            If the value is not defined, set "admin"
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.AdministratorPassword">
            <summary>
            Retrieve the administrator login by default
            If the value is not defined, set "Syncytium"
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.ConnectionMaxWaiting">
            <summary>
            Retrieve the number of seconds of waiting before considering that a user is already connected
            If the value is not defined, set "30"
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.ConnectionCleanup">
            <summary>
            Notify if all previous connections from the current machine must be cleaned up on starting
            If the value is not defined or contains different than "TRUE", "ON" or "1", set False
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.ConnectionLotSize">
            <summary>
            LotSize for the list of notifications from the server to the client
            By default: 100
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.PasswordExpiricyDay">
            <summary>
            Retrieve the number of days between the ask of the new password and the changement of the new password
            If the value is not defined, set "1"
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.ClientHubMaxSize">
            <summary>
            Maximum size in ko of the buffer cache in the client side
            by default: 1.024 ko (1Mo)
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.ClientHubTimeout">
            <summary>
            Timeout allowed of the websocket in seconds
            by default: 30 secondes
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.ConfigurationManager._serverHttpRoot">
            <summary>
            Http Root defined by the application
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.ServerHttpRoot">
            <summary>
            Retrieve the root http address of the application
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.ServerHttpRootImages">
            <summary>
            Retrieve the root http address of the images of the application
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.ServerFileRootImages">
            <summary>
            Retrieve the directory root of the images of the application
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.ReleaseNotesFile">
            <summary>
            Retrieve the file representing the release notes
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.HeartbeatDelay">
            <summary>
            Delay in seconds between 2 heartbeats ( &lt;= 0 to disable)
            by default: 30 s and limited up to ClientHubTimeout / 2
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ConfigurationManager.Settings">
            <summary>
            Retrieves the list of settings described into web.config and take into account the default value set by this class
            </summary>
        </member>
        <member name="T:Syncytium.Common.Managers.ILogger">
            <summary>
            This class interfaces the logger manager
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ILogger.IsVerboseAll">
            <summary>
            Indicates if the all verbose mode is enabled or not
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ILogger.IsVerbose">
            <summary>
            Indicates if the verbose mode is enabled or not
            </summary>
        </member>
        <member name="M:Syncytium.Common.Managers.ILogger.Verbose(System.String,System.String)">
            <summary>
            Log a verbose message
            </summary>
            <param name="module"></param>
            <param name="message"></param>
        </member>
        <member name="P:Syncytium.Common.Managers.ILogger.IsDebug">
            <summary>
            Get or Set the debug flag
            </summary>
        </member>
        <member name="M:Syncytium.Common.Managers.ILogger.Debug(System.String,System.String)">
            <summary>
            Add a new debug message into the current file
            </summary>
            <param name="module"></param>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Managers.ILogger.Info(System.String,System.String)">
            <summary>
            Add a new info message into the current file
            </summary>
            <param name="module"></param>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Managers.ILogger.Warn(System.String,System.String)">
            <summary>
            Add a new warn message into the current file
            </summary>
            <param name="module"></param>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Managers.ILogger.Error(System.String,System.String)">
            <summary>
            Add a new error message into the current file
            </summary>
            <param name="module"></param>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Managers.ILogger.Exception(System.String,System.String,System.Exception)">
            <summary>
            Write the content of an exception in the log file!
            </summary>
            <param name="module"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Syncytium.Common.Managers.ILogger.Open(System.IO.TextWriter)">
            <summary>
            Add a new text writer log into the application
            </summary>
            <param name="appendLog"></param>
        </member>
        <member name="M:Syncytium.Common.Managers.ILogger.Close">
            <summary>
            Remove the text writter appended with Open()
            </summary>
        </member>
        <member name="T:Syncytium.Common.Managers.ILoggerObject">
            <summary>
            This class interfaces an object having a logger
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ILoggerObject.IsVerboseAll">
            <summary>
            Indicates if the all verbose mode is enabled or not
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.ILoggerObject.IsVerbose">
            <summary>
            Indicates if the verbose mode is enabled or not
            </summary>
        </member>
        <member name="M:Syncytium.Common.Managers.ILoggerObject.Verbose(System.String,System.String)">
            <summary>
            Log a verbose message
            </summary>
            <param name="module"></param>
            <param name="message"></param>
        </member>
        <member name="P:Syncytium.Common.Managers.ILoggerObject.IsDebug">
            <summary>
            Get or Set the debug flag
            </summary>
        </member>
        <member name="M:Syncytium.Common.Managers.ILoggerObject.Debug(System.String)">
            <summary>
            Add a new debug message into the current file
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Managers.ILoggerObject.Info(System.String)">
            <summary>
            Add a new info message into the current file
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Managers.ILoggerObject.Warn(System.String)">
            <summary>
            Add a new warn message into the current file
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Managers.ILoggerObject.Error(System.String)">
            <summary>
            Add a new error message into the current file
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Managers.ILoggerObject.Exception(System.String,System.Exception)">
            <summary>
            Write the content of an exception in the log file!
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="T:Syncytium.Common.Managers.IModule">
            <summary>
            Describe properties expected for a user into the DS Database manager
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.IModule.Id">
            <summary>
            Id of the record
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.IModule.Profile">
            <summary>
            Module's role
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.IModule.CustomerId">
            <summary>
            CustomerId attached to the table
            </summary>
        </member>
        <member name="T:Syncytium.Common.Managers.IUser">
            <summary>
            Describe properties expected for a user into the DS Database manager
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.IUser.Id">
            <summary>
            Id of the record
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.IUser.CustomerId">
            <summary>
            CustomerId attached to the table
            </summary>
        </member>
        <member name="T:Syncytium.Common.Managers.IUserManager">
            <summary>
            Interface of the user manager
            </summary>
        </member>
        <member name="M:Syncytium.Common.Managers.IUserManager.GetById(System.Int32)">
            <summary>
            Retrieve the user description on depends on its Id
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Managers.IUserManager.GetModule(Syncytium.Common.Managers.IUser,System.Int32)">
            <summary>
            Retrieve the module on depends on the settings and rights of the current user
            </summary>
            <param name="user"></param>
            <param name="moduleId"></param>
            <returns></returns>
        </member>
        <member name="T:Syncytium.Common.Managers.RandomManager">
            <summary>
            Handle the randomization number
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.RandomManager._instance">
            <summary>
            Instance of the current random manager
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.RandomManager._rnd">
            <summary>
            Generator
            </summary>
        </member>
        <member name="M:Syncytium.Common.Managers.RandomManager.GetRandom">
            <summary>
            Return a random value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Managers.RandomManager.#ctor">
            <summary>
            Constructor of the random generator
            </summary>
        </member>
        <member name="P:Syncytium.Common.Managers.RandomManager.Instance">
            <summary>
            Retrieve the current instance or define a new instanceof RandomManager
            </summary>
        </member>
        <member name="T:Syncytium.Common.Managers.StatusManager">
            <summary>
            This static class handles the application status
            </summary>
        </member>
        <member name="T:Syncytium.Common.Managers.StatusManager.EStatus">
            <summary>
            List of status handled by the application
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.StatusManager.EStatus.STATUS_OK">
            <summary>
            Notify that the application is up-to-date and the application is running ...
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.StatusManager.EStatus.STATUS_FAIL">
            <summary>
            Notify that the application has a technical issue, the end-user has to contact the technical support team to resolve the issue
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.StatusManager.EStatus.STATUS_UPGRADING">
            <summary>
            Notify that the application has to be updated, the end-user has to wait that the application is up-to-date before trying a new connection
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.StatusManager.Status">
            <summary>
            Keep the current status of the application
            </summary>
        </member>
        <member name="F:Syncytium.Common.Managers.StatusManager.Exception">
            <summary>
            Store the exception occurring during the initialization process
            </summary>
        </member>
        <member name="T:Syncytium.Common.Logger.LoggerManager">
            <summary>
            Singleton describing the logger context and save trace into some logger (using log4net)
            </summary>
        </member>
        <member name="T:Syncytium.Common.Logger.LoggerManager.Level">
            <summary>
            Different level of logger
            </summary>
        </member>
        <member name="F:Syncytium.Common.Logger.LoggerManager.MODULE_NAME">
            <summary>
            Module name used into the logger
            </summary>
        </member>
        <member name="F:Syncytium.Common.Logger.LoggerManager.logger">
            <summary>
            log4net instance
            </summary>
        </member>
        <member name="F:Syncytium.Common.Logger.LoggerManager._logVerboseAll">
            <summary>
            True if All verbose trace must be enabled
            </summary>
        </member>
        <member name="F:Syncytium.Common.Logger.LoggerManager._logVerbose">
            <summary>
            True if verbose trace must be enabled
            </summary>
        </member>
        <member name="F:Syncytium.Common.Logger.LoggerManager._logDebug">
            <summary>
            True if debug trace must be added
            </summary>
        </member>
        <member name="F:Syncytium.Common.Logger.LoggerManager._logInitialized">
            <summary>
            Notify the logger if it's initialized
            </summary>
        </member>
        <member name="F:Syncytium.Common.Logger.LoggerManager._logFiles">
            <summary>
            List of text writer appended
            </summary>
        </member>
        <member name="F:Syncytium.Common.Logger.LoggerManager._mutex">
            <summary>
            Mutex protecting the critical section
            </summary>
        </member>
        <member name="F:Syncytium.Common.Logger.LoggerManager._lastCleanUp">
            <summary>
            Store the timestamp of the last clean up log files
            </summary>
        </member>
        <member name="F:Syncytium.Common.Logger.LoggerManager._cleanUpAvailable">
            <summary>
            Notify the possibility to clean up the log file
            </summary>
        </member>
        <member name="F:Syncytium.Common.Logger.LoggerManager._instance">
            <summary>
            Instance of the current logger
            </summary>
        </member>
        <member name="M:Syncytium.Common.Logger.LoggerManager.Dispose">
            <summary>
            Dispose this instance
            </summary>
        </member>
        <member name="M:Syncytium.Common.Logger.LoggerManager.#ctor">
            <summary>
            Constructor of the logger
            </summary>
        </member>
        <member name="M:Syncytium.Common.Logger.LoggerManager.Initialize">
            <summary>
            Initialize logger
            </summary>
        </member>
        <member name="P:Syncytium.Common.Logger.LoggerManager.IsVerboseAll">
            <summary>
            Get or Set the verbose flag
            </summary>
        </member>
        <member name="P:Syncytium.Common.Logger.LoggerManager.IsVerbose">
            <summary>
            Get or Set the verbose flag
            </summary>
        </member>
        <member name="P:Syncytium.Common.Logger.LoggerManager.IsDebug">
            <summary>
            Get or Set the debug flag
            </summary>
        </member>
        <member name="M:Syncytium.Common.Logger.LoggerManager.WriteMessage(Syncytium.Common.Logger.LoggerManager.Level,System.String,System.String)">
            <summary>
            Add a new line into the logger
            </summary>
            <param name="level">"D"ebug, "I"nfo, "W"arning, "E"rror</param>
            <param name="module">module name of the current message</param>
            <param name="message">message to add into the log file</param>
        </member>
        <member name="M:Syncytium.Common.Logger.LoggerManager.CleanUpLogFiles(System.Boolean)">
            <summary>
            Remove the oldest log files if it exceeds the max number of log days
            </summary>
            <param name="force">true if the clean up log file must be done even if the date is not ok</param>
        </member>
        <member name="M:Syncytium.Common.Logger.LoggerManager.Verbose(System.String,System.String)">
            <summary>
            Add a new verbose message into the current file
            </summary>
            <param name="module"></param>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Logger.LoggerManager.Debug(System.String,System.String)">
            <summary>
            Add a new debug message into the current file
            </summary>
            <param name="module"></param>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Logger.LoggerManager.Info(System.String,System.String)">
            <summary>
            Add a new info message into the current file
            </summary>
            <param name="module"></param>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Logger.LoggerManager.Warn(System.String,System.String)">
            <summary>
            Add a new warn message into the current file
            </summary>
            <param name="module"></param>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Logger.LoggerManager.Error(System.String,System.String)">
            <summary>
            Add a new error message into the current file
            </summary>
            <param name="module"></param>
            <param name="message"></param>
        </member>
        <member name="M:Syncytium.Common.Logger.LoggerManager.Exception(System.String,System.String,System.Exception)">
            <summary>
            Write the content of an exception in the log file!
            </summary>
            <param name="module"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Syncytium.Common.Logger.LoggerManager.Open(System.IO.TextWriter)">
            <summary>
            Add a new text writer log into the application
            </summary>
            <param name="appendLog"></param>
        </member>
        <member name="M:Syncytium.Common.Logger.LoggerManager.Close">
            <summary>
            Remove the text writter appended with Open()
            </summary>
        </member>
        <member name="M:Syncytium.Common.Logger.LoggerManager.CleanUp">
            <summary>
            Remove the oldest log files if it exceeds the max number of log days
            </summary>
        </member>
        <member name="M:Syncytium.Common.Logger.LoggerManager.Terminate">
            <summary>
            Close the main file and the current analysis
            </summary>
        </member>
        <member name="P:Syncytium.Common.Logger.LoggerManager.Instance">
            <summary>
            Retrieve the current instance or define a new instanceof logger
            </summary>
        </member>
        <member name="T:Syncytium.Common.Picture.PictureManager">
            <summary>
            Function building the conversion from a file (byte[]) to a string base64 (PNG) defining a picture into the application
            </summary>
        </member>
        <member name="M:Syncytium.Common.Picture.PictureManager.GetPngBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert a png file loaded to an image base64 (PNG)
            </summary>
            <param name="data"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Syncytium.Common.Picture.PictureManager.GetSvgBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert a svg file loaded to an image base64 (PNG)
            </summary>
            <param name="data"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
    </members>
</doc>
